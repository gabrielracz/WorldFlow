#version 450
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

struct Node
{
    vec4 pos;
    uint childPtr;
};

layout (std140, set = 0, binding = 0) buffer readonly TreeNodesBuffer {
    Node treeNodes[];
};

layout (set = 0, binding = 1) buffer writeonly IndirectDispatch {
    VkDrawIndexedIndirectCommand drawCommand;
};

layout (buffer_reference, std430) buffer VertexBuffer {
    vec3 vertices[];
};

layout (buffer_reference, std430) buffer IndexBuffer {
    uint indices[];
};

layout (push_constant) uniform PushConstants {
    uint64_t vertexBufferAddress;
    uint64_t indexBufferAddress;
} pc;

uint getIndex()
{
    return gl_GlobalInvocationID.x + 
           gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + 
           gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_WorkGroupSize.y;
}

void main()
{
    uint vtxBufDst = getIndex() * 8; // 8 vertices per box
    uint idxBufDst = getIndex() * 24; // 12 line segments to enclose box, 2 indices each

    Node node = treeNodes[getIndex()];

    const float globalGridSize = 0.5;
    float nodeLevel = node.pos.w;
    float s = globalGridSize / (1 << uint(nodeLevel)); // "radius" of nodes at this level

    vec3 center = node.pos.xyz;

    // generation
    const vec3 nodeVertices[] = {
        vec3(-s, -s, -s) + center,
        vec3( s, -s, -s) + center,
        vec3( s,  s, -s) + center,
        vec3(-s,  s, -s) + center,
        vec3(-s, -s,  s) + center,
        vec3( s, -s,  s) + center,
        vec3( s,  s,  s) + center,
        vec3(-s,  s,  s) + center,
    };

    uint nodeIndices[] = {
        0, 1,
        1, 2,
        2, 3,
        3, 0,
        4, 5,
        5, 6,
        6, 7,
        7, 4,
        0, 4,
        1, 5,
        2, 6,
        3, 7
    };

    for(int i = 0; i < 24; i++) {
        nodeIndices[i] += vtxBufDst;
    }

    VertexBuffer vertexBuffer = VertexBuffer(pc.vertexBufferAddress);
    IndexBuffer indexBuffer = IndexBuffer(pc.indexBufferAddress);

    for(int v = 0; v < 8; v++) {
        vertexBuffer.vertices[vtxBufDst + v] = nodeVertices[v];
    }

    for(int i = 0; i < 24; i++) {
        indexBuffer.indices[idxBufDst + i] = nodeIndices[i];
    }
}