#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid grid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

vec4 sampleVelocity(uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	// if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	// if(occ) {return vec4(0.0);}
	if(occ) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)] * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	uint index = getGridIndex(center, grid.resolution);

	// grid[index].debug.x = float(encodeMorton3D(center)) / float(grid.resolution.x * grid.resolution.y * grid.resolution.z);

	const float r = sampleVelocity(center, ivec3(1, 0, 0 )).x;
	const float l = sampleVelocity(center, ivec3(-1, 0, 0)).x;
	const float u = sampleVelocity(center, ivec3(0, 1, 0 )).y;
	const float d = sampleVelocity(center, ivec3(0, -1, 0)).y;
	const float f = sampleVelocity(center, ivec3(0, 0, 1 )).z;
	const float b = sampleVelocity(center, ivec3(0, 0, -1)).z;

    const float div = -0.5 * grid.cellSize * (r-l + u-d + f-b);
    grid.divergenceBuffer.data[index] = div;
	// grid.pressureBuffer.data[index] = 0.0;
}