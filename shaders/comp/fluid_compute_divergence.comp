#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable

#include "../common/grid.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;


#define BLOCK_SIZE GRID_LOCAL_SIZE_X
#define CACHE_SIZE BLOCK_SIZE+2
shared vec4 sharedVelocity[CACHE_SIZE][CACHE_SIZE][CACHE_SIZE];

void loadSharedCache(uint gridIndex, ivec3 gridPos, ivec3 localPos, ivec3 coarseGridPos) {
    // load current cell's value into cache
	WorldFlowSubGrid grid =  wfGrid.subgrids[pc.subgridLevel].ref;
    vec4 storedVelocity = grid.velocityBuffer.data[gridIndex];
    sharedVelocity[localPos.z+1][localPos.y+1][localPos.x+1] = storedVelocity;
    
	// load halo boundary cells
    for(int d = 0; d < 3; d++) {
        bool loEdge = localPos[d] == 0;
        bool hiEdge = localPos[d] == BLOCK_SIZE-1;
        ivec3 offset = ivec3(0);
        offset[d] = loEdge ? -1 : 1;
        if(loEdge || hiEdge) {
            ivec3 samplePos = gridPos + offset;
            ivec3 cachePos = localPos + (ivec3(1) + offset);
            ivec3 coarseGridSamplePos = coarseGridPos + offset;
            sharedVelocity[cachePos.z][cachePos.y][cachePos.x] = velocityBoundary(storedVelocity, samplePos, coarseGridSamplePos, wfGrid, pc.subgridLevel);
        }
    }
    barrier();
    memoryBarrierShared();
}


void main()
{
    if(!isWorkgroupActive(wfGrid, pc.subgridLevel, gl_WorkGroupID, gl_NumWorkGroups)) {
        return;
    }

    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    uvec3 localPos = gl_LocalInvocationID;
    uvec3 gridPos = getGridPos(wfGrid, pc.subgridLevel, gl_GlobalInvocationID, gl_LocalInvocationID, gl_WorkGroupID, gl_NumWorkGroups);
    uint gridIndex = getGridIndex(gridPos, grid.resolution);
    uvec3 coarseGridPos = getCoarseGridPos(gridPos, wfGrid, pc.subgridLevel);

    loadSharedCache(gridIndex, ivec3(gridPos), ivec3(localPos), ivec3(coarseGridPos));

    uvec3 cachePos = localPos + uvec3(1); // offset because of halo
    vec4 r = sharedVelocity[cachePos.z][cachePos.y][cachePos.x + 1];
    vec4 l = sharedVelocity[cachePos.z][cachePos.y][cachePos.x - 1];
    vec4 u = sharedVelocity[cachePos.z][cachePos.y + 1][cachePos.x];
    vec4 d = sharedVelocity[cachePos.z][cachePos.y - 1][cachePos.x];
    vec4 f = sharedVelocity[cachePos.z + 1][cachePos.y][cachePos.x];
    vec4 b = sharedVelocity[cachePos.z - 1][cachePos.y][cachePos.x];


    float h = grid.cellSize;
    const float div = -0.5 * h * (r.x-l.x + u.y-d.y + f.z-b.z);
    // non-scaled version
    // const float div = -(r.x-l.x + u.y-d.y + f.z-b.z)/(2*h);
    grid.divergenceBuffer.data[gridIndex] = div;

	// Compute finite difference approximations of partial derivatives
    float dwdy = 0.5 * (u.z - d.z);
    float dvdz = 0.5 * (f.y - b.y);
    float dudz = 0.5 * (f.x - b.x);
    float dwdx = 0.5 * (r.z - l.z);
    float dvdx = 0.5 * (r.y - l.y);
    float dudy = 0.5 * (u.x - d.x);

    // Compute vorticity components
    vec4 vorticity;
    vorticity.x = dwdy - dvdz;
    vorticity.y = dudz - dwdx;
    vorticity.z = dvdx - dudy;
    vorticity.a = 1.0;

    // Scale by grid cell size for proper units
    vorticity.xyz *= (1.0 / grid.cellSize);

	if(any(equal(gridPos, uvec3(0))) || any(equal(gridPos, grid.resolution.xyz-1))) {vorticity = vec4(0.0);}

    grid.vorticityBuffer.data[gridIndex] = vorticity;
}