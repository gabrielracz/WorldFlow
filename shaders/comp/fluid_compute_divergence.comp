#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGrid {
	FluidGridCell grid[];
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;


vec3 sampleVelocity(uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(gridInfo.resolution.xyz));
	bool occ = grid[getGridIndex(cell, gridInfo.resolution)].occupied > 0;
	bool valid = all(ge) && all(le) && !occ;
	vec3 velMask = vec3(ivec3(1 - offset.x * sign(offset.x), 1 - offset.y * sign(offset.y), 1 - sign(offset.z)));
	// if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].velocity * velMask;} // set normal component to 0
	// if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].velocity;}
	if(!valid) {return vec3(0.0, 0.0, 0.0);}
	return grid[getGridIndex(cell, gridInfo.resolution)].velocity;
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	uint index = getGridIndex(center, gridInfo.resolution);

	const float l = sampleVelocity(center, ivec3(-1, 0, 0)).x;
	const float r = sampleVelocity(center, ivec3(1, 0, 0 )).x;
	const float u = sampleVelocity(center, ivec3(0, 1, 0 )).y;
	const float d = sampleVelocity(center, ivec3(0, -1, 0)).y;
	const float f = sampleVelocity(center, ivec3(0, 0, 1 )).z;
	const float b = sampleVelocity(center, ivec3(0, 0, -1)).z;

    const float div = -0.5 * gridInfo.cellSize * (r-l + u-d + f-b);
    grid[index].divergence = div;
	grid[index].pressure = 0.0;
}