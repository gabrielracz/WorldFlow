#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;

vec4 sampleVelocity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	// if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	// if(occ) {return vec4(0.0);}
	if(occ) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)] * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}

void main()
{
    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
	uvec3 center = gl_GlobalInvocationID;
	uint index = getGridIndex(center, grid.resolution);

	const vec4 r = sampleVelocity(grid, center, ivec3(1, 0, 0 ));
	const vec4 l = sampleVelocity(grid, center, ivec3(-1, 0, 0));
	const vec4 u = sampleVelocity(grid, center, ivec3(0, 1, 0 ));
	const vec4 d = sampleVelocity(grid, center, ivec3(0, -1, 0));
	const vec4 f = sampleVelocity(grid, center, ivec3(0, 0, 1 ));
	const vec4 b = sampleVelocity(grid, center, ivec3(0, 0, -1));

    const float div = -0.5 * grid.cellSize * (r.x-l.x + u.y-d.y + f.z-b.z);
    grid.divergenceBuffer.data[index] = div;

	// Compute finite difference approximations of partial derivatives
    float dwdy = 0.5 * (u.z - d.z);
    float dvdz = 0.5 * (f.y - b.y);
    float dudz = 0.5 * (f.x - b.x);
    float dwdx = 0.5 * (r.z - l.z);
    float dvdx = 0.5 * (r.y - l.y);
    float dudy = 0.5 * (u.x - d.x);

    // Compute vorticity components
    vec4 vorticity;
    vorticity.x = dwdy - dvdz;
    vorticity.y = dudz - dwdx;
    vorticity.z = dvdx - dudy;

    // Scale by grid cell size for proper units
    vorticity *= (1.0 / grid.cellSize);

    // Store vorticity in your buffer (assuming you have a vorticity buffer)
    grid.vorticityBuffer.data[index] = vorticity;
}