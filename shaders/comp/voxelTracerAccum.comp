#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

#define FLT_MAX 3.402823466e+38
#define HEXCOLORVEC(h) vec4(((h&0xFF0000)>>16)/255.0f, ((h&0x00FF00)>>8)/255.0f, (h&0x0000FF)/255.0f, 1.0f)

layout(local_size_x = 8, local_size_y = 8) in;

// Input data structures
layout(set = 0, binding = 0) readonly buffer GridBuffer {
    FluidGridCell voxelData[];
};

layout(rgba32f, set = 0, binding = 1) uniform image2D outputImage;

layout(binding = 2) readonly buffer FluidInfo {
    FluidGridInfo gridInfo;
};

layout(push_constant) uniform constants {
    mat4 inverseProjection;  // Inverse projection matrix
    mat4 inverseView;        // Inverse view matrix
    vec3 cameraPos;         // Camera position in world space
    float nearPlane;        // Near plane distance
    vec2 screenSize;        // Width and height of output image
    uint maxDistance;      // Maximum ray travel distance
    float stepSize;         // Base color accumulation per step
    vec3 gridSize;          // Size of the voxel grid in each dimension
    float gridScale;        // Scale factor for the grid (new parameter)
    vec4 lightSource;        // Scale factor for the grid (new parameter)
    vec4 baseColor;        // Scale factor for the grid (new parameter)
    int renderType;
} pc;

// Helper function to convert 3D position to linear buffer index
uint getVoxelIndex(vec3 pos) {
    // Convert from scaled world space to grid space (0 to gridSize-1)
    vec3 normalizedPos = pos / pc.gridScale;  // First normalize by scale
    vec3 gridPos = (normalizedPos + 0.5) * pc.gridSize;
    ivec3 index = ivec3(floor(gridPos));
    
    // Clamp to grid bounds
    index = clamp(index, ivec3(0), ivec3(pc.gridSize) - 1);
    
    // Convert to linear index using the same formula as construction
    return index.z * uint(pc.gridSize.x) * uint(pc.gridSize.y) +
           index.y * uint(pc.gridSize.x) +
           index.x;
}

// Helper function to get ray direction from pixel coordinates
vec3 getRayDirection(vec2 pixelPos) {
    // Convert pixel position to NDC space (-1 to 1)
    vec2 ndc = (pixelPos / pc.screenSize) * 2.0 - 1.0;
    
    // Transform to view space
    vec4 viewSpace = pc.inverseProjection * vec4(ndc, 1.0, 1.0);
    viewSpace /= viewSpace.w;
    
    // Transform to world space
    vec4 worldSpace = pc.inverseView * vec4(viewSpace.xyz, 0.0);
    
    return normalize(worldSpace.xyz);
}

vec4 traceVoxels(vec3 rayOrigin, vec3 rayDir) {
    vec4 accumColor = vec4(0.0);
    
    // Calculate voxel size in world space (now scaled)
    vec3 voxelSize = (vec3(1.0) / pc.gridSize) * pc.gridScale;
    
    // Calculate initial intersection with scaled grid bounds
    vec3 gridMin = vec3(-0.5) * pc.gridScale;
    vec3 gridMax = vec3(0.5) * pc.gridScale;
    
    vec3 tMin = (gridMin - rayOrigin) / rayDir;
    vec3 tMax = (gridMax - rayOrigin) / rayDir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    
    if (tNear > tFar || tFar < 0.0) {
        return vec4(0.0);
    }
    
    // Start at first intersection
    float t = max(0.0, tNear);
    
    // Calculate initial position and step direction
    vec3 pos = rayOrigin + t * rayDir;
    vec3 step = sign(rayDir);
    
    // Calculate current voxel indices
    vec3 normalizedPos = pos / pc.gridScale;  // Normalize position by scale
    vec3 voxelPos = (normalizedPos + 0.5) * pc.gridSize;
    ivec3 mapPos = ivec3(floor(voxelPos));
    
    // Calculate delta t for moving one voxel in each direction
    vec3 tDelta = abs(voxelSize / rayDir);
    
    // Calculate next crossing points
    vec3 nextCrossing = vec3(mapPos) + max(step, 0.0);  // Next voxel boundaries
    vec3 tMaxAxis;
    
    // Calculate accurate tMax values for each axis
    for (int i = 0; i < 3; i++) {
        if (rayDir[i] > 0.0) {
            float worldCrossing = (nextCrossing[i] / pc.gridSize[i] - 0.5) * pc.gridScale;
            tMaxAxis[i] = tNear + (worldCrossing - rayOrigin[i]) / rayDir[i];
        } else if (rayDir[i] < 0.0) {
            float worldCrossing = ((nextCrossing[i] - 1.0) / pc.gridSize[i] - 0.5) * pc.gridScale;
            tMaxAxis[i] = tNear + (worldCrossing - rayOrigin[i]) / rayDir[i];
        } else {
            tMaxAxis[i] = FLT_MAX;
        }
    }
    
    // Main ray traversal loop
    for (int i = 0; i < 156; i++) {
        // Convert current position to grid index
        uint index = mapPos.z * uint(pc.gridSize.x) * uint(pc.gridSize.y) +
                    mapPos.y * uint(pc.gridSize.x) +
                    mapPos.x;
        
        // Bounds check
        if (all(greaterThanEqual(mapPos, ivec3(0))) && all(lessThan(mapPos, ivec3(pc.gridSize)))) {
            
            float density;
            vec4 color = pc.baseColor;
            if(pc.renderType == 1) {
                density = voxelData[index].density;
            }
            else if(pc.renderType == 2) {
                density = voxelData[index].divergence * 8;
            }
            else if(pc.renderType == 3) {
                density = voxelData[index].pressure * 10.0;
            }
            else if(pc.renderType == 4) {
                density = length(voxelData[index].velocity)/200.0;
            }
            // vec4 baseColor = density > 0.0 ? pc.baseColor : 

            // vec3 vel = voxelData[index].velocity/10;
            // vec4 baseColor = vec4(vel.x, vel.y, vel.z, 1.0);


            // if (density > 0.0) {
                float contribution = density * pc.stepSize;

                float attenuation = exp(-t * 0.07);
                vec4 heatColor = flameHeatmapColor(abs(density));
                if(density < 0.0) {
                    heatColor.rgb = 1.0 - heatColor.rgb;
                }
                // vec4 heatColor = viridisColor(density);
                contribution = clamp(contribution, 0.0, 1.0);
                vec4 voxelColor = vec4(vec3(heatColor.rgb * attenuation), contribution);

				// contribution = max(contribution, 0.004);
                // vec4 voxelColor = vec4(baseColor.rgb, contribution);
                
                voxelColor.rgb *= voxelColor.a;
                accumColor += voxelColor * (1.0 - accumColor.a);
                // accumColor = vec4(voxelColor.rgb, 0.8);
                // break;

                
                if (accumColor.a > 0.99) break;
            // }
        }
        
        // Find axis of next crossing
        vec3 compare = tMaxAxis - t;
        
        if (compare.x < compare.y && compare.x < compare.z) {
            mapPos.x += int(step.x);
            t = tMaxAxis.x;
            tMaxAxis.x += tDelta.x;
        } else if (compare.y < compare.z) {
            mapPos.y += int(step.y);
            t = tMaxAxis.y;
            tMaxAxis.y += tDelta.y;
        } else {
            mapPos.z += int(step.z);
            t = tMaxAxis.z;
            tMaxAxis.z += tDelta.z;
        }
    }
    
    return accumColor;
}

void main() {
    // Get current pixel coordinates
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    
    // Check if within image bounds
    if (any(greaterThanEqual(pixelPos, ivec2(pc.screenSize)))) {
        return;
    }
    
    // Calculate ray direction for this pixel
    vec3 rayDir = getRayDirection(vec2(pixelPos) + 0.5);  // Add 0.5 for pixel center
    
    // Trace ray and accumulate color
    vec4 voxelColor = traceVoxels(pc.cameraPos, rayDir);
    vec4 storedColor = imageLoad(outputImage, pixelPos);

    
    // Write result to output image
    imageStore(outputImage, pixelPos, vec4(mix(voxelColor.rgb, storedColor.rgb, (1-voxelColor.a)), 1.0));
}