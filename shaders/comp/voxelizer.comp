#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer GridBuffer {
    float grid[]; // 1D array to store the 3D grid data
};

layout(push_constant) uniform constants {
    uvec3 gridSize;
    float gridScale;
    float time;
} pc;

void main() {
    // Calculate the global index of the thread in the 3D grid
    uvec3 globalID = gl_GlobalInvocationID;
    uvec3 gridCenter = uvec3(pc.gridSize.x / 2, pc.gridSize.y / 2, pc.gridSize.z / 2);

    // Ensure the thread is within bounds
    if (globalID.x >= uint(pc.gridSize.x) || 
        globalID.y >= uint(pc.gridSize.y) || 
        globalID.z >= uint(pc.gridSize.z)) {
        return;
    }

    uint index = getGridIndex(globalID, pc.gridSize);

    float radius = pc.gridSize.x / 2;
    if(distance(globalID, gridCenter) < radius) {
        grid[index] = cnoise(vec3(globalID * pc.gridScale * 3.2) + vec3(pc.time * 0.5));
    } else {
		grid[index] = 0.0;
	}
}