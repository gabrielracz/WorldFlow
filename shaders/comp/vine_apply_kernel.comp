#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const uint MaxKernelSize = 16*16;
struct Kernel
{
    uvec4 size;
    float weights[MaxKernelSize];
};

layout(binding = 0, set = 0, rgba32f) uniform readonly image2D srcImg;
layout(binding = 1, set = 0, rgba32f) uniform writeonly image2D dstImg;
layout(std140, binding = 2, set = 0) uniform readonly KernelUniform {
    Kernel kernel;
};

const float testArray[3][3] = {
    {1.0, 2.0, 3.0},
    {4.0, 5.0, 6.0},
    {7.0, 8.0, 9.0}
};

float activation(float x) {
    return x;
}

vec4 applyKernel(ivec2 index, Kernel k)
{
    vec4 result = vec4(0.0);
    ivec2 h = ivec2(k.size.xy / 2);
    for(int y = 0; y < k.size.y; y++) {
        for(int x = 0; x < k.size.x; x++) {
            vec4 src = imageLoad(srcImg, index + ivec2(x, y) - h);
            result += vec4(
                activation(src.r * k.weights[y * k.size.x + x]),
                activation(src.g * k.weights[y * k.size.x + x]),
                activation(src.b * k.weights[y * k.size.x + x]),
                1.0
            );
        }
    }
    return result;
}

void main()
{
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    vec4 result = applyKernel(index, kernel);
    imageStore(dstImg, index, result);
}