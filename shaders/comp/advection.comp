#version 460

// size of compute workgroup
layout (local_size_x = 16, local_size_y = 16) in;

// descriptor bindings for the pipeline
layout(rgba32f, set = 0, binding = 0) uniform readonly image2D densityImage;
layout(rgba32f, set = 0, binding = 1) uniform readonly image2D velocityImage;
layout(rgba32f, set = 0, binding = 2) uniform writeonly image2D outputDensityImage;

layout(push_constant) uniform PushConstants {
    float time;
    float dt;
} pc;

vec2 traceVelocityField(vec2 pos, float N)
{
    // TODO: more sophisticated path trace?
    return pos + (imageLoad(velocityImage, ivec2(pos)).xy * -pc.dt);
}

void main()
{
    //TODO: update to work in general world-space
    vec2 size = imageSize(densityImage);
    vec2 pos = vec2(gl_GlobalInvocationID.xy);
    vec2 prev_pos = traceVelocityField(pos, size.x);
    prev_pos.x = clamp(prev_pos.x, 0.0, size.x);
    prev_pos.y = clamp(prev_pos.y, 0.0, size.y);

    // fractional distances away from 4 neighbouring cell centers
    float sxl = fract(prev_pos.x);
    float sxr = 1.0 - sxl;
    float syd= fract(prev_pos.y);
    float syu = 1.0 - syd;

    vec4 n1 = imageLoad(densityImage, ivec2(floor(prev_pos.x), floor(prev_pos.y)));
    vec4 n2 = imageLoad(densityImage, ivec2(floor(prev_pos.x), ceil(prev_pos.y) ));
    vec4 n3 = imageLoad(densityImage, ivec2(ceil(prev_pos.x),  ceil(prev_pos.y) ));
    vec4 n4 = imageLoad(densityImage, ivec2(ceil(prev_pos.x),  floor(prev_pos.y)));

    vec4 interpolatedDensity = sxl*(syu*n1 + syd*n2) + sxr*(syu*n4 + syd*n3);
    imageStore(outputDensityImage, ivec2(pos), interpolatedDensity);
}