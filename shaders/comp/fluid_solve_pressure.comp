#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGridReferencesBuffer {
	FluidGridReferences grid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

float samplePressure(uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(gridInfo.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.pressureBuffer.data[getGridIndex(center, gridInfo.resolution)];}
	if(!valid) {return 0.0;}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, gridInfo.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return 0.0;}

	return grid.pressureBuffer.data[getGridIndex(cell, gridInfo.resolution)];
}
void main()
{
	uvec3 center = gl_GlobalInvocationID;
	// uvec3 center = getRedBlackPosition(gl_GlobalInvocationID, gridInfo.resolution, pc.redBlack);
	uint index = getGridIndex(center, gridInfo.resolution);

	// Alternate updates in alternating checkerboard pattern to avoid atomics
	if((center.x + center.y + center.z + pc.redBlack % 2) == 0){
		return;
	}

	const float r = samplePressure(center, ivec3(1, 0, 0));
	const float l = samplePressure(center, ivec3(-1, 0, 0));
	const float u = samplePressure(center, ivec3(0, 1, 0));
	const float d = samplePressure(center, ivec3(0, -1, 0));
	const float f = samplePressure(center, ivec3(0, 0, 1));
	const float b = samplePressure(center, ivec3(0, 0, -1));

	const float oldPres = grid.pressureBuffer.data[index];
    const float newPres = (grid.divergenceBuffer.data[index] + r + l + u + d + f + b) / 6.0;

	// SOR
	// const float result = SOR(oldPres, newPres, avg3(gridInfo.resolution.xyx));

	float alpha = 1.7;
	float result = alpha * newPres + (1 - alpha) * oldPres;
	// const float result = newPres;

    // guarded by red-black
    grid.pressureBuffer.data[index] = result;
	// atomicExchange(grid.pressureBuffer.data[index], result);
}