#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGrid {
	FluidGridCell grid[];
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;
vec3 traceVelocityField(vec3 pos, vec3 velocity, float dt)
{
    // TODO: more sophisticated path trace?
    return pos + (velocity * -dt);
}

vec3 sampleVelocity(uvec3 center, ivec3 offset)
{
	uvec3 cell = center + offset;
	bvec3 ge = greaterThanEqual(cell, uvec3(0));
	bvec3 le = lessThan(cell, gridInfo.resolution.xyz);
	bool occ = grid[getGridIndex(cell, gridInfo.resolution)].occupied > 0;
	bool valid = all(ge) && all(le) && !occ;
	// if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].velocity * vec3(ge) * vec3(le);}
	if(!valid) {return vec3(0.0);}
	return grid[getGridIndex(cell, gridInfo.resolution)].velocity;
}


void main()
{
	uint index = getGridIndex(gl_GlobalInvocationID, gridInfo.resolution);
	FluidGridCell cell = grid[index];
	// center grid cell position
	vec3 pos = vec3(gl_GlobalInvocationID) + vec3(0.5, 0.5, 0.5);

	vec3 pastPos = traceVelocityField(pos, cell.velocity, pc.dt);
	pastPos = clampVector(pastPos, vec3(0, 0, 0), vec3(gridInfo.resolution - 1));
	uvec3 center = uvec3(pastPos);

	vec3 cellPos = fract(pastPos);
	
    // Determine which neighboring cells to sample based on position
    int i1 = (cellPos.x < 0.5) ? -1 : 1;
    int j1 = (cellPos.y < 0.5) ? -1 : 1;
    int k1 = (cellPos.z < 0.5) ? -1 : 1;
    
    // Sample all 8 neighboring cells
    vec3 c000 = sampleVelocity(center, ivec3(0, 0, 0));
    vec3 c100 = sampleVelocity(center, ivec3(i1, 0, 0));
    vec3 c010 = sampleVelocity(center, ivec3(0, j1, 0));
    vec3 c110 = sampleVelocity(center, ivec3(i1, j1, 0));
    vec3 c001 = sampleVelocity(center, ivec3(0, 0, k1));
    vec3 c101 = sampleVelocity(center, ivec3(i1, 0, k1));
    vec3 c011 = sampleVelocity(center, ivec3(0, j1, k1));
    vec3 c111 = sampleVelocity(center, ivec3(i1, j1, k1));
    
    // Calculate interpolation weights
    // If cellPos < 0.5, we want weight to go from 0.5 to 0
    // If cellPos >= 0.5, we want weight to go from 0 to 0.5
    vec3 weights;
    weights.x = (cellPos.x < 0.5) ? (0.5 - cellPos.x) : (cellPos.x - 0.5);
    weights.y = (cellPos.y < 0.5) ? (0.5 - cellPos.y) : (cellPos.y - 0.5);
    weights.z = (cellPos.z < 0.5) ? (0.5 - cellPos.z) : (cellPos.z - 0.5);
    
    // Normalize weights to [0,1] range
    weights *= 2.0;

	// vec3 interpolatedVelocity = trilinearInterpolation(vec3(fract(pastPos.x), fract(pastPos.y), fract(pastPos.z)), values, cell.velocity);
	vec3 interpolatedVelocity = triInterp(c000, c100, c010, c110,
                                c001, c101, c011, c111,
                                weights);


	atomicExchange(grid[index].velocity.x, interpolatedVelocity.x);
	atomicExchange(grid[index].velocity.y, interpolatedVelocity.y);
	atomicExchange(grid[index].velocity.z, interpolatedVelocity.z);
}