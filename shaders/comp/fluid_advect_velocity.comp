#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;

vec3 traceVelocityField(vec3 pos, vec3 velocity, float dt)
{
    return pos + (velocity * -dt);
}

vec4 sampleVelocity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	// if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return vec4(0.0);}
	// if(occ) {return grid[getGridIndex(center, grid.resolution)].velocity * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}

void main()
{
    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
	uint index = getGridIndex(gl_GlobalInvocationID, grid.resolution);
	vec3 pos = vec3(gl_GlobalInvocationID) + 0.5; // center grid cell position

	// FIXME
	vec3 pastPos = traceVelocityField(pos, grid.velocityBuffer.data[index].xyz, pc.dt);
	if(any(greaterThan(pastPos, vec3(grid.resolution.xyz) - 0.5)) || any(lessThan(pastPos, vec3(0.5)))) {
		vec3 clampedPos = clamp(pastPos, vec3(0.5), vec3(grid.resolution.xyz) - vec3(0.5));
		uint clampedIndex = getGridIndex(uvec3(floor(clampedPos)), grid.resolution);
		pastPos = clampedPos;
	}

	ivec3 center = ivec3(floor(pastPos));
	vec3 cellPos = fract(pastPos);
	
	if(cellPos == vec3(0.5)) {
		vec4 interpolatedVelocity = grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];
		atomicExchange(grid.velocityBuffer.data[index].x, interpolatedVelocity.x);
		atomicExchange(grid.velocityBuffer.data[index].y, interpolatedVelocity.y);
		atomicExchange(grid.velocityBuffer.data[index].z, interpolatedVelocity.z);
		grid.debugBuffer.data[index].x = 3.0;
		return;
	}

    // Determine which neighboring cells to sample based on position
    int i1 = (cellPos.x < 0.5) ? -1 : 1;
    int j1 = (cellPos.y < 0.5) ? -1 : 1;
    int k1 = (cellPos.z < 0.5) ? -1 : 1;
    
    // Sample all 8 neighboring cells
    vec4 c000 = sampleVelocity(grid, center, ivec3(0, 0, 0));
    vec4 c100 = sampleVelocity(grid, center, ivec3(i1, 0, 0));
    vec4 c010 = sampleVelocity(grid, center, ivec3(0, j1, 0));
    vec4 c110 = sampleVelocity(grid, center, ivec3(i1, j1, 0));
    vec4 c001 = sampleVelocity(grid, center, ivec3(0, 0, k1));
    vec4 c101 = sampleVelocity(grid, center, ivec3(i1, 0, k1));
    vec4 c011 = sampleVelocity(grid, center, ivec3(0, j1, k1));
    vec4 c111 = sampleVelocity(grid, center, ivec3(i1, j1, k1));
    
    // Calculate interpolation weights
    // If cellPos < 0.5, we want weight to go from 0.5 to 0
    // If cellPos >= 0.5, we want weight to go from 0 to 0.5
    vec3 weights;
    weights.x = (cellPos.x < 0.5) ? (0.5 - cellPos.x) : (cellPos.x - 0.5);
    weights.y = (cellPos.y < 0.5) ? (0.5 - cellPos.y) : (cellPos.y - 0.5);
    weights.z = (cellPos.z < 0.5) ? (0.5 - cellPos.z) : (cellPos.z - 0.5);
	
    // Normalize weights to [0,1] range
    weights *= 2.0;

	vec4 interpolatedVelocity = triInterp(c000, c100, c010, c110,
                                c001, c101, c011, c111,
                                weights);
	// vec4 interpolatedVelocity = grid[getGridIndex(center, grid.resolution)].velocity;

	atomicExchange(grid.velocityBuffer.data[index].x, interpolatedVelocity.x);
	atomicExchange(grid.velocityBuffer.data[index].y, interpolatedVelocity.y);
	atomicExchange(grid.velocityBuffer.data[index].z, interpolatedVelocity.z);
}