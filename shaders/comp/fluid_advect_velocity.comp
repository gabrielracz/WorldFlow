#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;

#define BLOCK_SIZE GRID_LOCAL_SIZE_X
#define CACHE_SIZE BLOCK_SIZE+2
shared vec4 sharedVelocity[CACHE_SIZE][CACHE_SIZE][CACHE_SIZE];

vec3 traceVelocityField(vec3 pos, vec3 velocity, float dt, float cellSize)
{
    return pos + (velocity/cellSize * -dt);
}

vec4 sampleVelocity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
    ivec3 samplePos = ivec3(center) + offset;
    vec4 storedVelocity = grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];
    ivec3 coarseGridPos = ivec3(getCoarseGridPos(samplePos, wfGrid, pc.subgridLevel));
    return velocityBoundary(storedVelocity, samplePos, coarseGridPos, wfGrid, pc.subgridLevel);

	// ivec3 cell = ivec3(center) + offset;
	// bvec3 ge = greaterThanEqual(cell, ivec3(0));
	// bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	// bool valid = all(ge) && all(le);
	// // if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	// if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	// bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	// if(occ) {return vec4(0.0);}
	// // if(occ) {return grid[getGridIndex(center, grid.resolution)].velocity * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	// return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}

vec4 interpolateVelocity(WorldFlowSubGrid grid, vec3 pos) {
	ivec3 center = ivec3(floor(pos));
	vec3 cellPos = fract(pos);

    // Determine which neighboring cells to sample based on position
    int i1 = (cellPos.x < 0.5) ? -1 : 1;
    int j1 = (cellPos.y < 0.5) ? -1 : 1;
    int k1 = (cellPos.z < 0.5) ? -1 : 1;
    
    // Sample all 8 neighboring cells
    vec4 c000 = sampleVelocity(grid, center, ivec3(0, 0, 0));
    vec4 c100 = sampleVelocity(grid, center, ivec3(i1, 0, 0));
    vec4 c010 = sampleVelocity(grid, center, ivec3(0, j1, 0));
    vec4 c110 = sampleVelocity(grid, center, ivec3(i1, j1, 0));
    vec4 c001 = sampleVelocity(grid, center, ivec3(0, 0, k1));
    vec4 c101 = sampleVelocity(grid, center, ivec3(i1, 0, k1));
    vec4 c011 = sampleVelocity(grid, center, ivec3(0, j1, k1));
    vec4 c111 = sampleVelocity(grid, center, ivec3(i1, j1, k1));
    
    // Calculate interpolation weights
    // If cellPos < 0.5, we want weight to go from 0.5 to 0
    // If cellPos >= 0.5, we want weight to go from 0 to 0.5
    vec3 weights;
    weights.x = (cellPos.x < 0.5) ? (0.5 - cellPos.x) : (cellPos.x - 0.5);
    weights.y = (cellPos.y < 0.5) ? (0.5 - cellPos.y) : (cellPos.y - 0.5);
    weights.z = (cellPos.z < 0.5) ? (0.5 - cellPos.z) : (cellPos.z - 0.5);
	
    // Normalize weights to [0,1] range
    weights *= 2.0;

	// vec4 interpolatedVelocity = triInterp(c000, c100, c010, c110, c001, c101, c011, c111, weights);
	vec4 interpolatedVelocity = cubicInterp8Point(c000, c100, c010, c110, c001, c101, c011, c111, weights);
    return interpolatedVelocity;
}

vec3 clampPos(WorldFlowSubGrid grid, vec3 pos) {
	// FIXME?
	if(any(greaterThan(pos, vec3(grid.resolution.xyz) - 0.5)) || any(lessThan(pos, vec3(0.5)))) {
		vec3 clampedPos = clamp(pos, vec3(0.5), vec3(grid.resolution.xyz) - vec3(0.5));
		uint clampedIndex = getGridIndex(uvec3(floor(clampedPos)), grid.resolution);
		pos = clampedPos;
	}
    return pos;
}

void main()
{
    if(!isWorkgroupActive(wfGrid, pc.subgridLevel, gl_WorkGroupID, gl_NumWorkGroups)) {
        return;
    }

    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    uvec3 gridPos = getGridPos(wfGrid, pc.subgridLevel, gl_GlobalInvocationID, gl_LocalInvocationID, gl_WorkGroupID, gl_NumWorkGroups);
	uint index = getGridIndex(gridPos, grid.resolution);
	vec3 pos = vec3(gridPos) + 0.5;

    vec4 currentVelocity = grid.velocityBuffer.data[index];
	vec3 pastPos = traceVelocityField(pos, currentVelocity.xyz, pc.dt, grid.cellSize);
    pastPos = clampPos(grid, pastPos);
    vec4 bkwdVelocity = interpolateVelocity(grid, pastPos);

    vec4 result = bkwdVelocity;

// Optional MacCormack fwd + bwd advection
// #define MACCORMACK
#ifdef MACCORMACK

    vec3 forwardPos = traceVelocityField(pos, bkwdVelocity.xyz, -pc.dt, grid.cellSize);
    vec3 clampedFwdPos = clampPos(grid, forwardPos);
    vec4 fwdVelocity = interpolateVelocity(grid, forwardPos);

    vec4 errorCorrection = currentVelocity - fwdVelocity;
    float alpha = clamp(1.0 - length(errorCorrection) / (0.5 * length(currentVelocity)), 0.0, 0.5);
    result = mix(bkwdVelocity, bkwdVelocity + 0.5 * errorCorrection, alpha);

#endif

// Unconditionally Stable MacCormack Method from Paper
// #define STABLE_MACCORMACK
#ifdef STABLE_MACCORMACK

    vec3 forwardPos = traceVelocityField(pos, bkwdVelocity.xyz, -pc.dt, grid.cellSize);
    vec3 clampedFwdPos = clampPos(grid, forwardPos);
    vec4 fwdVelocity = interpolateVelocity(grid, forwardPos); // This is \hat{\phi}^n

    // Calculate error estimate: e = (\hat{\phi}^n - \phi^n) / 2
    vec4 error_e = (fwdVelocity - currentVelocity) / 2.0;

    // Correct the predicted value: \phi^{n+1} = \hat{\phi}^{n+1} - e
    vec4 corrected_velocity = bkwdVelocity - error_e;

    // Implement limiter by reverting to first order (semi-Lagrangian) if new extrema are created
    vec4 limited_velocity = corrected_velocity;
    for(int i = 0; i < 3; ++i) { // Apply to x, y, z components
        float min_val = min(currentVelocity[i], bkwdVelocity[i]);
        float max_val = max(currentVelocity[i], bkwdVelocity[i]);
        if (limited_velocity[i] > max_val || limited_velocity[i] < min_val) {
            limited_velocity[i] = bkwdVelocity[i];
        }
    }
    result = limited_velocity;

#endif

	atomicExchange(grid.velocityBuffer.data[index].x, result.x);
	atomicExchange(grid.velocityBuffer.data[index].y, result.y);
	atomicExchange(grid.velocityBuffer.data[index].z, result.z);
}