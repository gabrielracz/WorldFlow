#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGrid {
	FluidGridCell grid[];
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

vec3 sampleVelocity(uvec3 center, ivec3 offset)
{
	uvec3 cell = center + offset;
	bvec3 ge = greaterThanEqual(cell, uvec3(0));
	bvec3 le = lessThan(cell, gridInfo.resolution.xyz);
	bool occ = grid[getGridIndex(cell, gridInfo.resolution)].occupied > 0;
	bool valid = all(ge) && all(le) && !occ;
	if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].velocity * vec3(1 - abs(offset));} // set normal component to 0
	// if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].velocity;}
	if(!valid) {return vec3(0.0);}
	return grid[getGridIndex(cell, gridInfo.resolution)].velocity;
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	// uvec3 center = getRedBlackPosition(gl_GlobalInvocationID, pc.redBlack);
	uint index = getGridIndex(center, gridInfo.resolution);
	FluidGridCell cell = grid[index];

	// Alternate updates in alternating checkerboard pattern to avoid atomics
	if(mod(center.x + center.y + center.z + pc.redBlack, 2) == 0){
		return;
	}

	const vec3 l = sampleVelocity(center, ivec3(-1, 0, 0));
	const vec3 r = sampleVelocity(center, ivec3(1, 0, 0));
	const vec3 u = sampleVelocity(center, ivec3(0, 1, 0));
	const vec3 d = sampleVelocity(center, ivec3(0, -1, 0));
	const vec3 f = sampleVelocity(center, ivec3(0, 0, 1));
	const vec3 b = sampleVelocity(center, ivec3(0, 0, -1));
	const vec3 c = cell.velocity;

    const float diffRate =  0.000010;
	const float N = gridInfo.resolution.x * gridInfo.resolution.y;
    const float a = diffRate*pc.dt*N; 

    const vec3 newVel = (c + a*(l + r + u + d + f + b)) / (1+6*a);

	const vec3 result = SOR(cell.velocity, newVel, gridInfo.resolution.x);

    // guarded by red-black
    grid[index].velocity = result;

    // atomicExchange(grid[index].velocity.x, result.x);
    // atomicExchange(grid[index].velocity.y, result.y);
    // atomicExchange(grid[index].velocity.z, result.z);
}