#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid grid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

vec4 sampleVelocity(uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	// if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return vec4(0.0);}
	// if(occ) {return grid[getGridIndex(center, grid.resolution)].velocity * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	// uvec.3 center = getRedBlackPosition(gl_GlobalInvocationID, pc.redBlack);
	uint index = getGridIndex(center, grid.resolution);

	// Alternate updates in alternating checkerboard pattern to avoid atomics
	if(!isRedBlackActive(center, pc.redBlack)){
		return;
	}

	const vec4 r = sampleVelocity(center, ivec3(1, 0, 0));
	const vec4 l = sampleVelocity(center, ivec3(-1, 0, 0));
	const vec4 u = sampleVelocity(center, ivec3(0, 1, 0));
	const vec4 d = sampleVelocity(center, ivec3(0, -1, 0));
	const vec4 f = sampleVelocity(center, ivec3(0, 0, 1));
	const vec4 b = sampleVelocity(center, ivec3(0, 0, -1));
	const vec4 c = grid.velocityBuffer.data[index];

    const float diffRate =  0.000010;
	const float N = 1.0/(grid.cellSize*grid.cellSize);
    const float a = diffRate*pc.dt*N; 

    const vec4 newVel = (c + a*(l + r + u + d + f + b)) / (1+6*a);

	const vec4 result = SOR(c, newVel, avg3(grid.resolution.xyz));
	// const vec4 result = newVel;

    // guarded by red-black
    grid.velocityBuffer.data[index] = result;

    // atomicExchange(grid[index].velocity.x, result.x);
    // atomicExchange(grid[index].velocity.y, result.y);
    // atomicExchange(grid[index].velocity.z, result.z);
}