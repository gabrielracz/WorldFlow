#version 460
#extension GL_GOOGLE_include_directive : enable
// #extension GL_EXT_debug_printf: enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid grid;
};

layout(push_constant) uniform PushConstants {
	vec4 sourcePosition;
	vec4 velocity;
	vec4 objectPosition;
	float elapsed;
	float dt;
	float sourceRadius;
	int addVelocity;
	int addDensity;
    float density;
	uint objectType;
	float objectRadius;
	float decayRate;
	int clear;
} pc;

float manhattanDistance(vec3 p1, vec3 p2) {
    return abs(p1.x - p2.x) + abs(p1.y - p2.y) + abs(p1.z + p2.z);
}


void main()
{
    uvec3 pos = gl_GlobalInvocationID;
    if (!isWithinGridBounds(pos, grid.resolution)) {
        return;
    }
    uint index = getGridIndex(pos, grid.resolution);

    grid.flagsBuffer.data[index] = 0;
    grid.pressureBuffer.data[index] = 0.0;
    grid.debugBuffer.data[index] = vec4(0.0);

	if(pc.clear > 0) {
        clearGridCell(grid, index);
		return;
	}

    if(distance(pos, pc.sourcePosition.xyz) < pc.sourceRadius) {
        if(pc.addDensity > 0) {
            grid.densityBuffer.data[index] += pc.density;
			grid.flagsBuffer.data[index] |= FLAG_SOURCE;
        }

        if(pc.addVelocity > 0) {
            grid.velocityBuffer.data[index] += pc.velocity;
			grid.flagsBuffer.data[index] |= FLAG_SOURCE;
        }
    }

    if(distance(pos, pc.objectPosition.xyz) < pc.objectRadius && pc.objectType > 0) {
        grid.flagsBuffer.data[index] |= FLAG_OCCUPIED;
    }

    grid.densityBuffer.data[index] *= exp(-pc.decayRate * pc.dt);
}