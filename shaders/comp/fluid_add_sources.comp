#version 460
#extension GL_GOOGLE_include_directive : enable
// #extension GL_EXT_debug_printf: enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	vec4 sourcePosition;
	vec4 velocity;
	vec4 objectPosition;
	float elapsed;
	float dt;
	float sourceRadius;
	int addVelocity;
	int addDensity;
    float density;
	uint objectType;
	float objectRadius;
	float decayRate;
	int clear;
    uint subgridLevel;
} pc;

float manhattanDistance(vec3 p1, vec3 p2) {
    return abs(p1.x - p2.x) + abs(p1.y - p2.y) + abs(p1.z + p2.z);
}

void main()
{
    if(!isWorkgroupActive(wfGrid, pc.subgridLevel, gl_WorkGroupID, gl_NumWorkGroups)) {
        return;
    }
    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    WorldFlowSubGrid coarseGrid = wfGrid.subgrids[max(int(pc.subgridLevel) - 1, 0)].ref;

    uvec3 gridPos = getGridPos(wfGrid, pc.subgridLevel, gl_GlobalInvocationID, gl_LocalInvocationID, gl_WorkGroupID, gl_NumWorkGroups);
    vec3 worldPos = gridToWorld(gridPos, grid);
    if (!isWithinGridBounds(ivec3(gridPos), grid.resolution)) {
        return;
    }
    uint index = getGridIndex(gridPos, grid.resolution);
    uint coarseIndex = getCoarseGridIndex(gridPos, wfGrid, pc.subgridLevel);

    bool parentWasDeactivated = pc.subgridLevel > 0 && (coarseGrid.flagsBuffer.data[getCoarseGridIndex(gridPos, wfGrid, pc.subgridLevel)] & FLAG_DEACTIVED) > 0;
    parentWasDeactivated = false;
	if(pc.clear > 0 || parentWasDeactivated) {
        clearGridCell(grid, index);
        // grid.debugBuffer.data[index] = vec4(0.4);
        if(parentWasDeactivated)grid.flagsBuffer.data[index] |= FLAG_DEACTIVED;
		return;
	}

    grid.flagsBuffer.data[index] &= ~FLAG_TRANSIENTS;
    grid.pressureBuffer.data[index] = 0.0;
    grid.debugBuffer.data[index] = vec4(0.0);

    if(distance(gridPos, pc.sourcePosition.xyz) < pc.sourceRadius) {
        if(pc.addDensity > 0) {
            grid.densityBuffer.data[index] += pc.density * pc.dt;
			grid.flagsBuffer.data[index] |= FLAG_SOURCE;
        }

        if(pc.addVelocity > 0) {
            grid.velocityBuffer.data[index] += pc.velocity * pc.dt;
			grid.flagsBuffer.data[index] |= FLAG_SOURCE;
        }
    }


    bool setActive = false;
    float objDist = distance(worldPos, pc.objectPosition.xyz);
    if( objDist < (pc.objectRadius+grid.cellSize) && pc.objectType > 0) {
        grid.flagsBuffer.data[index] |= FLAG_OCCUPIED;
        setActive = true;
    }

    // float objectProximityScale = 2.0*float(pc.subgridLevel);
    // float objectProximityScale = 1.5*(wfGrid.subgridCount - pc.subgridLevel);
    // if(pc.subgridLevel < wfGrid.subgridCount-1 && objDist < (pc.objectRadius*objectProximityScale)) {
    //     setActive = true;
    // }

    // if(pc.subgridLevel == 0) {
    //    setActive = true;
    // }

    float vorticityThreshold = 0.8;
    if(pc.subgridLevel < wfGrid.subgridCount-1 && length(grid.vorticityBuffer.data[index].xyz) > vorticityThreshold) {
        setActive = true;
    }

    if(setActive) {
        if(pc.subgridLevel == 0) {
            grid.flagsBuffer.data[index] |= FLAG_ACTIVE;
        }
        else {
            // WorldFlowSubGrid cg = wfGrid.subgrids[pc.subgridLevel-1].ref;
            // if((cg.flagsBuffer.data[coarseIndex] & FLAG_ACTIVE) > 0) {
                grid.flagsBuffer.data[index] |= FLAG_ACTIVE;
            // }
        }
    // } else if ((grid.flagsBuffer.data[index] & FLAG_ACTIVE) > 0){
    } else {
        grid.flagsBuffer.data[index] |= FLAG_DEACTIVED;
        grid.flagsBuffer.data[index] &= ~FLAG_ACTIVE;
    }

    if(pc.subgridLevel > 0) {
        grid.debugBuffer.data[index] = vec4(0.75);
    }

    grid.densityBuffer.data[index] *= exp(-pc.decayRate * pc.dt);
}