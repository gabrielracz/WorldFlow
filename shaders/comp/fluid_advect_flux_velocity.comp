#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;

vec4 sampleVelocity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	// if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return vec4(0.0);}
	// if(occ) {return grid[getGridIndex(center, grid.resolution)].velocity * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}



void main()
{
    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
	uint index = getGridIndex(gl_GlobalInvocationID, grid.resolution);
	vec3 pos = vec3(gl_GlobalInvocationID) + vec3(0.5, 0.5, 0.5); // center grid cell position
	uvec3 center = gl_GlobalInvocationID;

	const vec4 l = sampleVelocity(grid, center, ivec3(-1, 0, 0));
	const vec4 r = sampleVelocity(grid, center, ivec3(1, 0, 0));
	const vec4 u = sampleVelocity(grid, center, ivec3(0, 1, 0));
	const vec4 d = sampleVelocity(grid, center, ivec3(0, -1, 0));
	const vec4 f = sampleVelocity(grid, center, ivec3(0, 0, 1));
	const vec4 b = sampleVelocity(grid, center, ivec3(0, 0, -1));
	const vec4 oldVel = grid.velocityBuffer.data[index];

    // Sample neighboring velocities
    const vec4 vel_east = sampleVelocity(grid, center, ivec3(1, 0, 0));
    const vec4 vel_west = sampleVelocity(grid, center, ivec3(-1, 0, 0));
    const vec4 vel_north = sampleVelocity(grid, center, ivec3(0, 1, 0));
    const vec4 vel_south = sampleVelocity(grid, center, ivec3(0, -1, 0));
    const vec4 vel_front = sampleVelocity(grid, center, ivec3(0, 0, 1));
    const vec4 vel_back = sampleVelocity(grid, center, ivec3(0, 0, -1));

    vec4 newVel = oldVel;
	// float h = grid.cellSize;
	float h = 1.0;

    // Simple first-order upwind advection (for each velocity component)
    // X-component advection by the x-velocity
    float u_east = vel_east.x;
    float u_west = vel_west.x;
    float u_center = oldVel.x;
    float dudx_plus = max(0.0, u_center) * (u_center - u_west) / h;
    float dudx_minus = min(0.0, u_center) * (u_east - u_center) / h;
    newVel.x -= pc.dt * (dudx_plus + dudx_minus);

    // Y-component advection by the y-velocity
    float v_north = vel_north.y;
    float v_south = vel_south.y;
    float v_center = oldVel.y;
    float dvdy_plus = max(0.0, v_center) * (v_center - v_south) / h;
    float dvdy_minus = min(0.0, v_center) * (v_north - v_center) / h;
    newVel.y -= pc.dt * (dvdy_plus + dvdy_minus);

    // Z-component advection by the z-velocity
    float w_front = vel_front.z;
    float w_back = vel_back.z;
    float w_center = oldVel.z;
    float dwdz_plus = max(0.0, w_center) * (w_center - w_back) / h;
    float dwdz_minus = min(0.0, w_center) * (w_front - w_center) / h;
    newVel.z -= pc.dt * (dwdz_plus + dwdz_minus);

    grid.velocityBuffer.data[index] = newVel;
}