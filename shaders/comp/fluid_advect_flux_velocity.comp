#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;

vec4 sampleVelocity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.velocityBuffer.data[getGridIndex(center, grid.resolution)];}
	// if(!valid) {return vec4(0.0, 0.0, 0.0, 1.0);}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return vec4(0.0);}
	// if(occ) {return grid[getGridIndex(center, grid.resolution)].velocity * abs(vec4(1.0 - abs(vec3(offset)), 1.0));}// 

	return grid.velocityBuffer.data[getGridIndex(cell, grid.resolution)];
}



void main()
{
    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
	uint index = getGridIndex(gl_GlobalInvocationID, grid.resolution);
	vec3 pos = vec3(gl_GlobalInvocationID) + vec3(0.5, 0.5, 0.5); // center grid cell position
	uvec3 center = gl_GlobalInvocationID;

	const vec4 l = sampleVelocity(grid, center, ivec3(-1, 0, 0));
	const vec4 r = sampleVelocity(grid, center, ivec3(1, 0, 0));
	const vec4 u = sampleVelocity(grid, center, ivec3(0, 1, 0));
	const vec4 d = sampleVelocity(grid, center, ivec3(0, -1, 0));
	const vec4 f = sampleVelocity(grid, center, ivec3(0, 0, 1));
	const vec4 b = sampleVelocity(grid, center, ivec3(0, 0, -1));
	const vec4 oldVel = grid.velocityBuffer.data[index];

    float dx = grid.resolution.x;
    vec4 flux = vec4(0);
    
    // X-direction flux
    flux.x = (r.x * r.x - l.x * l.x) / (2.0 * dx);
    
    // Y-direction flux
    flux.y = (u.y * u.y - d.y * d.y) / (2.0 * dx);
    
    // Z-direction flux
    flux.z = (f.z * f.z - b.z * b.z) / (2.0 * dx);

    vec4 newVel = oldVel - flux * pc.dt;

	grid.velocityBuffer.data[index] = newVel;
}