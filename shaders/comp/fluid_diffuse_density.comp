#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid grid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

float sampleDensity(uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.densityBuffer.data[getGridIndex(center, grid.resolution)];}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return grid.densityBuffer.data[getGridIndex(center, grid.resolution)];}

	return grid.densityBuffer.data[getGridIndex(cell, grid.resolution)];
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	// uvec3 center = getRedBlackPosition(gl_GlobalInvocationID, pc.redBlack);
	uint index = getGridIndex(center, grid.resolution);

	// Alternate updates in alternating checkerboard pattern to avoid atomics
	if(!isRedBlackActive(center, pc.redBlack)){
		return;
	}

	float l = sampleDensity(center, ivec3(-1, 0, 0));
	float r = sampleDensity(center, ivec3(1, 0, 0));
	float u = sampleDensity(center, ivec3(0, 1, 0));
	float d = sampleDensity(center, ivec3(0, -1, 0));
	float f = sampleDensity(center, ivec3(0, 0, 1));
	float b = sampleDensity(center, ivec3(0, 0, -1));
	float c = grid.densityBuffer.data[index];

    const float diffRate =  0.0000015;
	const float N = 1.0/(grid.cellSize*grid.cellSize);
    const float a = diffRate*pc.dt*N; 

    const float newDns = (c + a*(l + r + u + d + f + b)) / (1+6*a); // backwards stable
	const float result = SOR(c, newDns, avg3(grid.resolution.xyz));

	grid.densityBuffer.data[index] = result;
}