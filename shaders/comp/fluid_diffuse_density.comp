#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGrid {
	FluidGridCell grid[];
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

float sampleDensity(uvec3 center, ivec3 offset)
{
	uvec3 cell = center + offset;
	bool valid = all(greaterThanEqual(cell, uvec3(0))) && all(lessThan(cell, gridInfo.resolution));
	// if(!valid) {return grid[getGridIndex(cell, gridInfo.resolution)].density;}
	if(!valid) {return 0.0;}
	return grid[getGridIndex(cell, gridInfo.resolution)].density;
}

uvec3 getRedBlackPosition(uvec3 threadID, uint redBlack) {
    // For a checkerboard pattern in 3D, we only need to modify X
    // Y and Z stay the same as the thread ID
    uint x = threadID.x * 2;  // Double the X position
    
    // Offset X based on Y and Z parity
    bool shouldOffset = ((threadID.y + threadID.z) % 2) == 0;
    x = x + (shouldOffset ? redBlack : (1 - redBlack));
    
    return uvec3(x, threadID.y, threadID.z);
}


void main()
{
	// uvec3 center = gl_GlobalInvocationID;
	uvec3 center = getRedBlackPosition(gl_GlobalInvocationID, pc.redBlack);
	uint index = getGridIndex(center, gridInfo.resolution);
	FluidGridCell cell = grid[index];

	// Alternate updates in alternating checkerboard pattern to avoid atomics
	// if(mod(center.x + center.y + center.z + pc.redBlack, 2) == 0){
	// 	return;
	// }

	float l = sampleDensity(center, ivec3(-1, 0, 0));
	float r = sampleDensity(center, ivec3(1, 0, 0));
	float u = sampleDensity(center, ivec3(0, 1, 0));
	float d = sampleDensity(center, ivec3(0, -1, 0));
	float f = sampleDensity(center, ivec3(0, 0, 1));
	float b = sampleDensity(center, ivec3(0, 0, -1));
	float c = cell.density;

    const float diffRate =  0.001;
	const float N = gridInfo.resolution.x * gridInfo.resolution.y;
    const float a = diffRate*pc.dt*N; 

    const float result = (c + a*(l + r + u + d + f + b)) / (1+6*a); // backwards stable

	// atomicExchange(grid[index].density, result);
	grid[index].density = result;
}