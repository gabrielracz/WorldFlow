#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

#define FLT_MAX 3.402823466e+38
#define HEXCOLORVEC(h) vec4(((h&0xFF0000)>>16)/255.0f, ((h&0x00FF00)>>8)/255.0f, (h&0x0000FF)/255.0f, 1.0f)

layout(local_size_x = 8, local_size_y = 8) in;

// Input data structures
layout(set = 0, binding = 0) readonly buffer WorldFlowGridBuffer {
    WorldFlowGrid wfGrid;
};

layout(rgba32f, set = 0, binding = 1) uniform image2D outputImage;

layout(push_constant) uniform constants {
    mat4 inverseProjection;  // Inverse projection matrix
    mat4 inverseView;        // Inverse view matrix
    vec3 cameraPos;         // Camera position in world space
    float nearPlane;        // Near plane distance
    vec2 screenSize;        // Width and height of output image
    uint maxDistance;      // Maximum ray travel distance
    float stepSize;         // Base color accumulation per step
    vec3 gridSize;          // Size of the voxel grid in each dimension
    float gridScale;        
    vec4 lightSource;        
    vec4 baseColor;        
    int renderType;
} pc;

// Helper function to get ray direction from pixel coordinates
vec3 getRayDirection(vec2 pixelPos) {
    // Convert pixel position to NDC space (-1 to 1)
    vec2 ndc = (pixelPos / pc.screenSize) * 2.0 - 1.0;
    
    // Transform to view space
    vec4 viewSpace = pc.inverseProjection * vec4(ndc, 1.0, 1.0);
    viewSpace /= viewSpace.w;
    
    // Transform to world space
    vec4 worldSpace = pc.inverseView * vec4(viewSpace.xyz, 0.0);
    
    return normalize(worldSpace.xyz);
}

vec3 calculateNormal(vec3 currentVoxel, vec3 previousVoxel) {
    // calculate the difference to determine which axis we crossed
    vec3 diff = currentVoxel - previousVoxel;
    vec3 cmp = abs(diff);
    
    if(cmp.x > cmp.y && cmp.x > cmp.z) {
        return vec3(sign(diff.x), 0.0, 0.0);
    } else if (cmp.y > cmp.z) {
        return vec3(0.0, sign(diff.y), 0.0);
    } else {
        return vec3(0.0, 0.0, sign(diff.z));
    }
    
    // fallback (shouldn't happen in a proper ray march)
    return vec3(0.0, 1.0, 0.0);
}

vec4 lighting(vec4 pixel, vec3 lightvec, vec3 norm) {

	float diffuse = max(0.0, dot(norm,lightvec)); 
    vec4 light_color = vec4(1.0, 1.0, 1.0, 1.0);
    return 1.0*diffuse*light_color*pixel + 0.25*light_color*pixel;// + 0.1*spec*light_color;
}

vec4 traceVoxels(vec3 rayOrigin, vec3 rayDir) {
    WorldFlowSubGrid rootGrid = wfGrid.subgrids[0].ref;
    vec4 accumColor = vec4(0.0);
    // Calculate world-space dimensions of the grid
    vec3 worldSize = rootGrid.resolution.xyz * rootGrid.cellSize;
    vec3 gridMin = -worldSize * 0.5;
    vec3 gridMax = worldSize * 0.5;
    
    // Calculate initial intersection with grid bounds
    vec3 tMin = (gridMin - rayOrigin) / rayDir;
    vec3 tMax = (gridMax - rayOrigin) / rayDir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    
    if (tNear > tFar || tFar < 0.0) {
        return vec4(0.0);
    }
    
    // Start at first intersection
    float t = max(0.0, tNear);
    
    // Calculate initial position and step direction
    vec3 pos = rayOrigin + t*rayDir;
    vec3 step = sign(rayDir);
    
    // Calculate voxel indices considering non-square grid
    vec3 normalizedPos = (pos - gridMin) / worldSize;  // Normalize to [0,1]
    vec3 voxelPos = normalizedPos * vec3(rootGrid.resolution.xyz);
    ivec3 mapPos = clamp(ivec3(floor(voxelPos)), ivec3(0), ivec3(rootGrid.resolution.xyz - 1));
    
    // Calculate delta t for moving one voxel in each direction
    vec3 tDelta = abs(rootGrid.cellSize / rayDir);
    vec3 voxelSize = vec3(rootGrid.cellSize);
    vec3 voxelMin = gridMin + vec3(mapPos) * voxelSize;
    vec3 voxelMax = voxelMin + rootGrid.cellSize;
    vec3 tVoxelMin = (voxelMin - rayOrigin) / rayDir;
    vec3 tVoxelMax = (voxelMin + voxelSize - rayOrigin) / rayDir;
    vec3 tMaxAxis = vec3((step.x > 0.0) ? tVoxelMax.x : tVoxelMin.x);
    tMaxAxis.y = (step.y > 0.0) ? tVoxelMax.y : tVoxelMin.y;
    tMaxAxis.z = (step.z > 0.0) ? tVoxelMax.z : tVoxelMin.z;
    
    float tPrev = t;
    int missteps = 0;
    // Main ray traversal loop
    // ivec3 prevMapPos = mapPos;
    vec3 prevPos = pos;
    uint subgridLevel = 0;
    vec3 crossingAxis = tMaxAxis;
    float distThroughCell = 0.0;
    for (int i = 0; i < pc.maxDistance; i++) {
        WorldFlowSubGrid grid = wfGrid.subgrids[subgridLevel].ref;
        uint index = getGridIndex(uvec3(mapPos), grid.resolution);
        // Bounds check;
        if(isWithinGridBounds(mapPos, grid.resolution)) {
            float density = 0.0;
            vec4 color = pc.baseColor;
            if((grid.flagsBuffer.data[index] & FLAG_OCCUPIED) > 0 && pc.renderType < 5) {
                vec3 worldPos = rayOrigin + t * rayDir;
                // vec3 worldPos = gridToWorld(index, grid.resolution, grid.cellSize);
                vec3 normal = -crossingAxis;
                vec3 viewDir = rayDir;
				vec3 lightVec = normalize(worldPos - pc.lightSource.xyz);
                vec4 litColor = lighting(color, lightVec, normal);
                // vec4 litColor = vec4(abs(worldPos), 1.0);

                vec4 attenuation = vec4(1.0, 1.0, 1.0, exp(-t * 0.1));
                accumColor = vec4(
                    accumColor.rgb * accumColor.a + litColor.rgb * (1.0 - accumColor.a),
                    1.0 
                );
                break;
            }
            if(pc.renderType == 1) {
                density = grid.densityBuffer.data[index];
            }
            else if(pc.renderType == 2) {
                density = grid.divergenceBuffer.data[index] * 8;
            }
            else if(pc.renderType == 3) {
                density = grid.pressureBuffer.data[index] * 10.0;
            }
            else if(pc.renderType == 4) {
                density = length(grid.velocityBuffer.data[index].xyz)/10.0;
            }
            else if(pc.renderType == 5) {
                density = grid.debugBuffer.data[index].x;
            }
            else if(pc.renderType == 6) {
                density = ((grid.flagsBuffer.data[index] & FLAG_ACTIVE) > 0) ? 1.0 : 0.0;
            }
            float contribution = abs(density) * distThroughCell * 10;

            // float attenuation = exp(-t * 0.07);
            float attenuation = 1.0;

			vec4 heatColor = viridisColor(abs(density));
            if(density < 0.0) {
            	heatColor = infernoColor(abs(density));
            }

            // contribution = clamp(contribution, 0.0, 1.0);
            vec4 voxelColor = vec4(vec3(heatColor.rgb * attenuation), contribution);
            
            voxelColor.rgb *= voxelColor.a;
            accumColor += voxelColor * (1.0 - accumColor.a);
            if (accumColor.a > 0.99) break;
        } else {
            missteps += 1;
            break;
        }
        
        tPrev = t;

        // Find axis of next crossing
        vec3 compare = tMaxAxis - t;
        float subdivision = grid.resolution.w;
        if (compare.x < compare.y && compare.x < compare.z) {
            t = tMaxAxis.x;
            tMaxAxis.x += tDelta.x / subdivision;
            mapPos.x += int(step.x);
            crossingAxis = -vec3(1.0, 0.0, 0.0) * step;
        } else if (compare.y < compare.z) {
            t = tMaxAxis.y;
            tMaxAxis.y += tDelta.y / subdivision;
            mapPos.y += int(step.y);
            crossingAxis = -vec3(0.0, 1.0, 0.0) * step;
        } else {
            t = tMaxAxis.z;
            tMaxAxis.z += tDelta.z / subdivision;
            mapPos.z += int(step.z);
            crossingAxis = -vec3(0.0, 0.0, 1.0) * step;
        }


        // SUBGRID TRANSITIONS
        int parentSublevel = max(int(subgridLevel) - 1, 0);
        WorldFlowSubGrid topGrid = wfGrid.subgrids[max(int(subgridLevel) - 1, 0)].ref;
        uint topIndex = getGridIndex(uvec3(mapPos), topGrid.resolution);

        if(subgridLevel == 0 && isWithinGridBounds(uvec3(mapPos), topGrid.resolution) && (topGrid.flagsBuffer.data[topIndex] & FLAG_ACTIVE) > 0) {
            subgridLevel = 1;
            WorldFlowSubGrid sg = wfGrid.subgrids[1].ref;
            float subd = sg.resolution.w;
            vec3 worldPos = rayOrigin + (t + tDelta/subd/subd)*rayDir;
            mapPos = ivec3(unflattenGridIndex(worldToGridIndex(worldPos, sg.resolution, sg.cellSize), sg.resolution));

            vec3 gridPos = (worldPos - gridMin)/sg.cellSize; //fractional grid space
            // find the next highest multiple of cellSize that is above 
            for (int i = 0; i < 3; i++) {
                if (rayDir[i] == 0.0) {
                    tMaxAxis[i] = FLT_MAX;
                    continue;
                }
                
                float cellCount = floor(gridPos[i]);
                float nextBoundary;
                
                if (step[i] > 0.0) {
                    // Moving in positive direction - get next higher boundary
                    nextBoundary = (cellCount + 1.0) * sg.cellSize;
                } else {
                    // Moving in negative direction - get next lower boundary
                    nextBoundary = cellCount * sg.cellSize;
                }
                
                // Convert boundary position to world space
                float worldBoundary = gridMin[i] + nextBoundary;
                
                // Calculate t value where ray intersects this boundary
                float tNext = (worldBoundary - rayOrigin[i]) / rayDir[i];
                
                // Only update if this boundary is ahead of our current position
                if (tNext > t) {
                    tMaxAxis[i] = tNext;
                } else {
                    // We're exactly at a boundary or floating point error
                    // Move to the next boundary
                    if (step[i] > 0.0) {
                        worldBoundary += sg.cellSize;
                        return vec4(1.0);
                    } else {
                        worldBoundary -= sg.cellSize;
                    }
                    tMaxAxis[i] = (worldBoundary - rayOrigin[i]) / rayDir[i];
                }
            }
        } else if (subgridLevel > 0) {
            // Check if we should move back to the coarser grid
            WorldFlowSubGrid currentGrid = wfGrid.subgrids[subgridLevel].ref;
            WorldFlowSubGrid coarserGrid = wfGrid.subgrids[subgridLevel - 1].ref;
            
            // Convert current world position to coarser grid space to check if we're still in an active region
            vec3 worldPos = rayOrigin + t * rayDir;
            uint coarserIndex = worldToGridIndex(worldPos, coarserGrid.resolution, coarserGrid.cellSize);
            
            if (!isWithinGridBounds(uvec3(unflattenGridIndex(coarserIndex, coarserGrid.resolution)), coarserGrid.resolution) || 
                (coarserGrid.flagsBuffer.data[coarserIndex] & FLAG_ACTIVE) == 0) {
                
                // Transition from finer grid to coarser grid
                subgridLevel -= 1;
                
                // Calculate new position in the coarser grid
                mapPos = ivec3(unflattenGridIndex(coarserIndex, coarserGrid.resolution));
                
                // Calculate grid space position (with fractional part)
                vec3 gridPos = (worldPos - gridMin) / coarserGrid.cellSize;
                
                // Update tMaxAxis for the coarser grid
                for (int i = 0; i < 3; i++) {
                    if (abs(rayDir[i]) < 1e-5) {
                        tMaxAxis[i] = FLT_MAX;
                        continue;
                    }
                    
                    // Calculate cell index and fractional position
                    float cellIndex = floor(gridPos[i]);
                    float fracPos = gridPos[i] - cellIndex;
                    
                    // Determine next boundary position in grid space
                    float nextBoundaryGrid;
                    
                    if (step[i] > 0.0) {
                        // If we're very close to the next boundary, use the one after
                        if (fracPos > 1.0 - 1e-5) {
                            nextBoundaryGrid = (cellIndex + 2.0) * coarserGrid.cellSize;
                        } else {
                            nextBoundaryGrid = (cellIndex + 1.0) * coarserGrid.cellSize;
                        }
                    } else { // step[i] < 0.0
                        // If we're very close to the previous boundary, use the one before
                        if (fracPos < 1e-5) {
                            nextBoundaryGrid = (cellIndex - 1.0) * coarserGrid.cellSize;
                        } else {
                            nextBoundaryGrid = cellIndex * coarserGrid.cellSize;
                        }
                    }
                    
                    // Convert to world space
                    float worldBoundary = gridMin[i] + nextBoundaryGrid;
                    
                    // Calculate t value for this boundary
                    float tNext = (worldBoundary - rayOrigin[i]) / rayDir[i];
                    
                    // Only update if this is ahead of our current position
                    if (tNext > t + 1e-5) {
                        tMaxAxis[i] = tNext;
                    } else {
                        // We're at a boundary or have precision issues, move to next one
                        if (step[i] > 0.0) {
                            worldBoundary += coarserGrid.cellSize;
                        } else {
                            worldBoundary -= coarserGrid.cellSize;
                        }
                        tMaxAxis[i] = (worldBoundary - rayOrigin[i]) / rayDir[i];
                    }
                }
            }
        }

        distThroughCell = min3(tMaxAxis) - t; //get ray distance through cell we are about to pass through
    }
    
    return accumColor;
}

void main() {
    // Get current pixel coordinates
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    
    // Check if within image bounds
    if (any(greaterThanEqual(pixelPos, ivec2(pc.screenSize)))) {
        return;
    }
    
    // Calculate ray direction for this pixel
    vec3 rayDir = getRayDirection(vec2(pixelPos) + 0.5);  // Add 0.5 for pixel center
    
    // Trace ray and accumulate color
    vec4 voxelColor = traceVoxels(pc.cameraPos, rayDir);
    vec4 storedColor = imageLoad(outputImage, pixelPos);

    
    // Write result to output image
    imageStore(outputImage, pixelPos, vec4(mix(voxelColor.rgb, storedColor.rgb, (1-voxelColor.a)), 1.0));
}