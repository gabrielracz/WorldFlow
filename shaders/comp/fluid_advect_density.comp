#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffers {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;

vec3 traceVelocityField(vec3 pos, vec3 velocity, float dt, float cellSize)
{
    return pos + (velocity/cellSize * -dt);
}

float sampleDensity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
    ivec3 samplePos = ivec3(center) + offset;
    float storedDensity = grid.densityBuffer.data[getGridIndex(center, grid.resolution)];
    ivec3 coarseGridPos = ivec3(getCoarseGridPos(samplePos, wfGrid, pc.subgridLevel));
    return densityBoundary(storedDensity, samplePos, coarseGridPos, wfGrid, pc.subgridLevel);
}

vec4 sampleVelocity(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
    ivec3 samplePos = ivec3(center) + offset;
    ivec3 coarseGridPos = ivec3(getCoarseGridPos(samplePos, wfGrid, pc.subgridLevel));
    return velocityBoundary(vec4(0.0), samplePos, coarseGridPos, wfGrid, pc.subgridLevel);
}

vec3 clampPos(WorldFlowSubGrid grid, vec3 pos) {
	// FIXME?
	if(any(greaterThan(pos, vec3(grid.resolution.xyz) - 0.5)) || any(lessThan(pos, vec3(0.5)))) {
		vec3 clampedPos = clamp(pos, vec3(0.5), vec3(grid.resolution.xyz) - vec3(0.5));
		uint clampedIndex = getGridIndex(uvec3(floor(clampedPos)), grid.resolution);
		pos = clampedPos;
	}
    return pos;
}

float interpolatedDensity(WorldFlowSubGrid grid, vec3 pos) {
	ivec3 center = ivec3(pos);
	vec3 cellPos = fract(pos);
	
    // Determine which neighboring cells to sample based on position
    int i1 = (cellPos.x <= 0.5) ? -1 : 1;
    int j1 = (cellPos.y <= 0.5) ? -1 : 1;
    int k1 = (cellPos.z <= 0.5) ? -1 : 1;
    
    // Sample all 8 neighboring cells
    float c000 = sampleDensity(grid, center, ivec3(0, 0, 0));
    float c100 = sampleDensity(grid, center, ivec3(i1, 0, 0));
    float c010 = sampleDensity(grid, center, ivec3(0, j1, 0));
    float c110 = sampleDensity(grid, center, ivec3(i1, j1, 0));
    float c001 = sampleDensity(grid, center, ivec3(0, 0, k1));
    float c101 = sampleDensity(grid, center, ivec3(i1, 0, k1));
    float c011 = sampleDensity(grid, center, ivec3(0, j1, k1));
    float c111 = sampleDensity(grid, center, ivec3(i1, j1, k1));
    
    // Calculate interpolation weights
    // If cellPos < 0.5, we want weight to go from 0.5 to 0
    // If cellPos >= 0.5, we want weight to go from 0 to 0.5
    vec3 weights;
    weights.x = (cellPos.x <= 0.5) ? (0.5 - cellPos.x) : (cellPos.x - 0.5);
    weights.y = (cellPos.y <= 0.5) ? (0.5 - cellPos.y) : (cellPos.y - 0.5);
    weights.z = (cellPos.z <= 0.5) ? (0.5 - cellPos.z) : (cellPos.z - 0.5);
    
    // Normalize weights to [0,1] range
    weights *= 2.0;

	float interpolatedDensity = triInterp(c000, c100, c010, c110, c001, c101, c011, c111, weights);
	// float interpolatedDensity = cubicInterp8Point(c000, c100, c010, c110, c001, c101, c011, c111, weights);
    return interpolatedDensity;
}

vec4 interpolateVelocity(WorldFlowSubGrid grid, vec3 pos) {
	ivec3 center = ivec3(floor(pos));
	vec3 cellPos = fract(pos);

    // Determine which neighboring cells to sample based on position
    int i1 = (cellPos.x < 0.5) ? -1 : 1;
    int j1 = (cellPos.y < 0.5) ? -1 : 1;
    int k1 = (cellPos.z < 0.5) ? -1 : 1;
    
    // Sample all 8 neighboring cells
    vec4 c000 = sampleVelocity(grid, center, ivec3(0, 0, 0));
    vec4 c100 = sampleVelocity(grid, center, ivec3(i1, 0, 0));
    vec4 c010 = sampleVelocity(grid, center, ivec3(0, j1, 0));
    vec4 c110 = sampleVelocity(grid, center, ivec3(i1, j1, 0));
    vec4 c001 = sampleVelocity(grid, center, ivec3(0, 0, k1));
    vec4 c101 = sampleVelocity(grid, center, ivec3(i1, 0, k1));
    vec4 c011 = sampleVelocity(grid, center, ivec3(0, j1, k1));
    vec4 c111 = sampleVelocity(grid, center, ivec3(i1, j1, k1));
    
    // Calculate interpolation weights
    // If cellPos < 0.5, we want weight to go from 0.5 to 0
    // If cellPos >= 0.5, we want weight to go from 0 to 0.5
    vec3 weights;
    weights.x = (cellPos.x < 0.5) ? (0.5 - cellPos.x) : (cellPos.x - 0.5);
    weights.y = (cellPos.y < 0.5) ? (0.5 - cellPos.y) : (cellPos.y - 0.5);
    weights.z = (cellPos.z < 0.5) ? (0.5 - cellPos.z) : (cellPos.z - 0.5);
	
    // Normalize weights to [0,1] range
    weights *= 2.0;

	// vec4 interpolatedVelocity = triInterp(c000, c100, c010, c110, c001, c101, c011, c111, weights);
	vec4 interpolatedVelocity = cubicInterp8Point(c000, c100, c010, c110, c001, c101, c011, c111, weights);
    return interpolatedVelocity;
}

void main()
{
    if(!isWorkgroupActive(wfGrid, pc.subgridLevel, gl_WorkGroupID, gl_NumWorkGroups)) {
        return;
    }

    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    uvec3 gridPos = getGridPos(wfGrid, pc.subgridLevel, gl_GlobalInvocationID, gl_LocalInvocationID, gl_WorkGroupID, gl_NumWorkGroups);
	uint index = getGridIndex(gridPos, grid.resolution);
	vec3 pos = vec3(gridPos) + 0.5;

    vec3 currentVelocity = grid.velocityBuffer.data[index].xyz;
	vec3 pastPos = traceVelocityField(pos, currentVelocity, pc.dt, grid.cellSize);
    pastPos = clampPos(grid, pastPos);
    float bkwdDensity = interpolatedDensity(grid, pastPos);

    float result = bkwdDensity;

// #define MACCORMACK
#ifdef MACCORMACK

    vec4 bkwdVelocity = interpolateVelocity(grid, pastPos);    
    vec3 fwdPos = traceVelocityField(pos, bkwdVelocity.xyz, -pc.dt, grid.cellSize);
    fwdPos = clampPos(grid, fwdPos);
    float fwdDensity = interpolatedDensity(grid, fwdPos);

    float currentDensity = grid.densityBuffer.data[index];
    float errorCorrection = currentDensity - fwdDensity;
    float maxCorrection = 0.3;
    float alpha = clamp(1.0 - abs(errorCorrection) / maxCorrection, 0.0, 1.0);
    result = bkwdDensity + alpha * 0.5 * errorCorrection;
    result = (sign(result) != sign(currentDensity)) ? bkwdDensity : result;
#endif

// Unconditionally Stable MacCormack Method from Paper
// #define UNCONDITIONALLY_STABLE_MACCORMACK_DENSITY_PAPER
#ifdef UNCONDITIONALLY_STABLE_MACCORMACK_DENSITY_PAPER

    // Predictor step (already computed as bkwdDensity)
    // bkwdDensity corresponds to \hat{\phi}^{n+1} in the paper (semi-Lagrangian A(\phi^n))

    // Backward step to estimate error
    // Get the velocity at the departure point of the backward trace
    vec4 bkwdVelocity_paper = interpolateVelocity(grid, pastPos);

    // Trace forward from pos using the velocity at the backward traced point to get \hat{\phi}^n
    float currentDensity = grid.densityBuffer.data[index];
    vec3 forwardPos_paper = traceVelocityField(pos, bkwdVelocity_paper.xyz, -pc.dt, grid.cellSize);
    vec3 clampedFwdPos_paper = clampPos(grid, forwardPos_paper);
    float fwdDensity_paper = interpolatedDensity(grid, clampedFwdPos_paper); // This is \hat{\phi}^n

    // Calculate error estimate: e = (\hat{\phi}^n - \phi^n) / 2
    float error_e = (fwdDensity_paper - currentDensity) / 2.0;

    // Correct the predicted value: \phi^{n+1} = \hat{\phi}^{n+1} - e
    float corrected_density = bkwdDensity - error_e;

    // Implement limiter by reverting to first order (semi-Lagrangian) if new extrema are created
    // Compare corrected_density with the range of currentDensity and bkwdDensity
    float min_val = min(currentDensity, bkwdDensity);
    float max_val = max(currentDensity, bkwdDensity);
    
    float limited_density = corrected_density;
    if (limited_density > max_val || limited_density < min_val) {
        limited_density = bkwdDensity;
    }

    result = limited_density;

#endif

	// float interpolatedDensity = grid[getGridIndex(center, grid.resolution)].density;

	atomicExchange(grid.densityBuffer.data[index], result);
}