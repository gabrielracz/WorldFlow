#version 450
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Node
{
    vec4 pos;
    uint childPtr;
};

layout(std140, set = 0, binding = 0) buffer NodeBufferInfo {
    uint nodeCounter;
};

layout (std140, set = 0, binding = 1) buffer TreeNodesBuffer {
    Node treeNodes[];
};

uint getInvocationIndex()
{
    return gl_GlobalInvocationID.x + 
           gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + 
           gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_WorkGroupSize.y;
}

#define DIVIDE_MASK  0x80000000
#define CHILDPTR_MASK 0x7FFFFFFF
void main()
{
    // uint idx = getInvocationIndex();
    uint idx = gl_GlobalInvocationID.x;
    Node node = treeNodes[idx];
    if((node.childPtr & DIVIDE_MASK) == 0) {
        return;
    }

    uint childBlockIdx = atomicAdd(nodeCounter, 8);

    const float childDepth = node.pos.w + 1;

    const uint division = 2;
    const float s = 0.5 / ((1 << uint(childDepth)));
    const vec3 childPositions[] = {
        vec3(-s, -s, -s) + node.pos.xyz,
        vec3( s, -s, -s) + node.pos.xyz,
        vec3(-s,  s, -s) + node.pos.xyz,
        vec3( s,  s, -s) + node.pos.xyz,
        vec3(-s, -s,  s) + node.pos.xyz,
        vec3( s, -s,  s) + node.pos.xyz,
        vec3(-s,  s,  s) + node.pos.xyz,
        vec3( s,  s,  s) + node.pos.xyz,
    };
    for(int i = 0; i < 8; i++) {
        Node child;
        child.pos = vec4(childPositions[i], childDepth);
        child.childPtr = 0;
        treeNodes[childBlockIdx + i] = child;
    }
    treeNodes[idx].childPtr = childBlockIdx;
}
