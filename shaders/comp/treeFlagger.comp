#version 450
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct VoxelFragment
{
    vec3 position;
    uint gridIndex;
};

struct Node
{
    vec4 pos;
    uint childPtr;
    uint mask;
};

layout(std430, binding = 0) buffer readonly VoxelFragmentList {
    VoxelFragment fragList[];
};

layout(std430, binding = 1) buffer readonly VoxelFragmentListInfo {
    uint fragCounter;
};

layout (std140, set = 0, binding = 2) buffer TreeNodesBuffer {
    Node treeNodes[];
};

uint getIndex()
{
    return gl_GlobalInvocationID.x + 
           gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + 
           gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_WorkGroupSize.y;
}

uint getGridIndex(uvec3 pos, uvec3 gridDimensions)
{
    return pos.z * gridDimensions.x * gridDimensions.y +
           pos.y * gridDimensions.x +
           pos.x;
}

#define MAX_LEVEL 10
void main()
{
    // uint fragIndex = getIndex();
    uint fragIndex = gl_GlobalInvocationID.x;
    if(fragIndex > fragCounter) return;
    VoxelFragment frag = fragList[fragIndex];
    uint baseNodeIndex = 0;
    vec4 nodePos = vec4(0, 0, 0, 1.0);
    vec3 fragPos = frag.position;
    vec3 loc = frag.position;


    for(int level = 1; level < MAX_LEVEL; level++) {
        vec3 gridDimensions = vec3(2, 2, 2);
        uvec3 relativeNodePos = uvec3(floor((loc * gridDimensions)));
        uint childIndex = baseNodeIndex + getGridIndex(relativeNodePos, uvec3(gridDimensions));


        atomicAdd(treeNodes[childIndex].mask, 1);
        if(treeNodes[childIndex].childPtr == 0) {
            break;
        }
        
        baseNodeIndex = treeNodes[childIndex].childPtr;

        nodePos = treeNodes[childIndex].pos;
        float dim = (1 << level);
        loc = (fragPos - (nodePos.xyz + vec3(0.5))) * dim + vec3(0.5);
    }
}