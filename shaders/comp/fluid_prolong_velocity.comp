#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
    uint subgridLevel;
	float alpha;
} pc;

shared vec4 coarseVelocity;
void main()
{
	if(!isWorkgroupActive(wfGrid, pc.subgridLevel, gl_WorkGroupID, gl_NumWorkGroups)) {
        return;
    }

    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    uvec3 gridPos = getGridPos(wfGrid, pc.subgridLevel, gl_GlobalInvocationID, gl_LocalInvocationID, gl_WorkGroupID, gl_NumWorkGroups);
	uint index = getGridIndex(gridPos, grid.resolution);

	vec4 velocity = grid.velocityBuffer.data[index];
	// vec4 fineVelocity = workGroupSum(velocity, gl_LocalInvocationIndex);

	// perform only one read on the coarse grid cell covering this block of fine cells
	if(gl_LocalInvocationIndex == 0) {
		WorldFlowSubGrid coarseGrid = wfGrid.subgrids[pc.subgridLevel-1].ref;
		uint coarseIndex = getCoarseGridIndex(gridPos, wfGrid, pc.subgridLevel);
		coarseVelocity = coarseGrid.velocityBuffer.data[coarseIndex];
	}
	barrier();
	memoryBarrierShared();

	// // average the residual across this block of fine cells
	// float residual = coarseDensity - fineDensity;
	// float numFineCells = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	// // float newDensity = density + (residual/numFineCells); 
	vec4 newVelocity = mix(velocity, coarseVelocity, pc.alpha);
	// float newDensity = coarseDensity;

	grid.velocityBuffer.data[index] = newVelocity;
}