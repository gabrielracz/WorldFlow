#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = GRID_LOCAL_SIZE_X, local_size_y = GRID_LOCAL_SIZE_Y, local_size_z = GRID_LOCAL_SIZE_Z) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
    uint subgridLevel;
} pc;
float samplePressure(WorldFlowSubGrid grid, uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(grid.resolution.xyz));
	bool valid = all(ge) && all(le);
	if(!valid) {return grid.pressureBuffer.data[getGridIndex(center, grid.resolution)];}

	bool occ = (grid.flagsBuffer.data[getGridIndex(cell, grid.resolution)] & FLAG_OCCUPIED) > 0;
	if(occ) {return 0.0;}
	// if(!valid) {return 0.0;}
	return grid.pressureBuffer.data[getGridIndex(cell, grid.resolution)];
}

void main()
{
    if(!isWorkgroupActive(wfGrid, pc.subgridLevel, gl_WorkGroupID, gl_NumWorkGroups)) {
        return;
    }

    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    uvec3 gridPos = getGridPos(wfGrid, pc.subgridLevel, gl_GlobalInvocationID, gl_LocalInvocationID, gl_WorkGroupID, gl_NumWorkGroups);
	uint index = getGridIndex(gridPos, grid.resolution);

	const float r = samplePressure(grid, gridPos, ivec3(1, 0, 0));
	const float l = samplePressure(grid, gridPos, ivec3(-1, 0, 0));
	const float u = samplePressure(grid, gridPos, ivec3(0, 1, 0));
	const float d = samplePressure(grid, gridPos, ivec3(0, -1, 0));
	const float f = samplePressure(grid, gridPos, ivec3(0, 0, 1));
	const float b = samplePressure(grid, gridPos, ivec3(0, 0, -1));
	// const float c = grid.pressureBuffer.data[index];
	const float c = 0.0;
	const float h = grid.cellSize;


	float gradX = 0.5 * (r - l) / h;
	float gradY = 0.5 * (u - d) / h;
	float gradZ = 0.5 * (f - b) / h;

	vec4 newVelocity = grid.velocityBuffer.data[index] - vec4(gradX, gradY, gradZ, 0.0);
	grid.velocityBuffer.data[index] = vec4(newVelocity.xyz, 1.0);
}