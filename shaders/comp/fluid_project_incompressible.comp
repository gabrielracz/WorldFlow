#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGrid {
	FluidGridCell grid[];
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

float samplePressure(uvec3 center, ivec3 offset)
{
	uvec3 cell = center + offset;
	bool valid = all(greaterThanEqual(cell, uvec3(0))) && all(lessThan(cell, gridInfo.resolution));
	if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].pressure;}
	// if(!valid) {return 1.0;}
	return grid[getGridIndex(cell, gridInfo.resolution)].pressure;
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	uint index = getGridIndex(gl_GlobalInvocationID, gridInfo.resolution);
	FluidGridCell cell = grid[index];

	const float l = samplePressure(center, ivec3(-1, 0, 0));
	const float r = samplePressure(center, ivec3(1, 0, 0));
	const float u = samplePressure(center, ivec3(0, 1, 0));
	const float d = samplePressure(center, ivec3(0, -1, 0));
	const float f = samplePressure(center, ivec3(0, 0, 1));
	const float b = samplePressure(center, ivec3(0, 0, -1));

	const float h = gridInfo.cellSize;

	float gradX = 0.5 * (r - l) / h;
	float gradY = 0.5 * (u - d) / h;
	float gradZ = 0.5 * (f - b) / h;

	vec3 newVelocity = cell.velocity - vec3(gradX, gradY, gradZ);
	grid[index].velocity = newVelocity;
}