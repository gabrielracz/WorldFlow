#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer FluidInfo {
	FluidGridInfo gridInfo;
};

layout(std430, binding = 1) buffer FluidGrid {
	FluidGridCell grid[];
};

layout(push_constant) uniform PushConstants {
	float elapsed;
	float dt;
	uint redBlack;
} pc;

float samplePressure(uvec3 center, ivec3 offset)
{
	ivec3 cell = ivec3(center) + offset;
	bvec3 ge = greaterThanEqual(cell, ivec3(0));
	bvec3 le = lessThan(cell, ivec3(gridInfo.resolution.xyz));
	bool occ = checkFlag(grid[getGridIndex(cell, gridInfo.resolution)].flags, FLAG_OCCUPIED);
	bool valid = all(ge) && all(le) && !occ;
	if(!valid) {return grid[getGridIndex(center, gridInfo.resolution)].pressure;}
	// if(!valid) {return 0.0;}
	return grid[getGridIndex(cell, gridInfo.resolution)].pressure;
}

void main()
{
	uvec3 center = gl_GlobalInvocationID;
	uint index = getGridIndex(gl_GlobalInvocationID, gridInfo.resolution);
	FluidGridCell cell = grid[index];

	const float r = samplePressure(center, ivec3(1, 0, 0));
	const float l = samplePressure(center, ivec3(-1, 0, 0));
	const float u = samplePressure(center, ivec3(0, 1, 0));
	const float d = samplePressure(center, ivec3(0, -1, 0));
	const float f = samplePressure(center, ivec3(0, 0, 1));
	const float b = samplePressure(center, ivec3(0, 0, -1));

	const float h = gridInfo.cellSize;

	float a = 0.000;
	float gradX = 0.5 * (r - l - a) / h;
	float gradY = 0.5 * (u - d - a) / h;
	float gradZ = 0.5 * (f - b - a) / h;

	vec4 newVelocity = cell.velocity - vec4(gradX, gradY, gradZ, 0.0);
	grid[index].velocity = vec4(newVelocity.xyz, 1.0);
}