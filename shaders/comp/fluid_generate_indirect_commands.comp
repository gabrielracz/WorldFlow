#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf: enable
#include "../common/grid.comp"
#include "../common/utils.comp"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer WorldFlowGridBuffer {
	WorldFlowGrid wfGrid;
};

layout(push_constant) uniform PushConstants {
    uint subgridLevel;
    uint groupDimensionLimit;
} pc;

uvec3 approximate_xyz_at_least(uint N, uint LIM) {
    uint r = uint(ceil(pow(float(N), 1.0 / 3.0)));

    uvec3 best = uvec3(0, 1, 1); // fallback
    uint bestProduct = 0xFFFFFFFFu; // max uint

    for (int dx = -10; dx <= 10; dx++) {
        uint x = r + dx;
        if (x < 1u || x > LIM) continue;

        for (int dy = -10; dy <= 10; dy++) {
            uint y = r + dy;
            if (y < 1u || y > LIM) continue;

            uint xy = x * y;
            if (xy == 0u) continue;

            uint z = (N + xy - 1u) / xy; // ceil(N / (x * y))
            if (z < 1u || z > LIM) continue;

            uint product = x * y * z;
            if (product >= N && product < bestProduct) {
                best = uvec3(x, y, z);
                bestProduct = product;
            }
        }
    }

    return best;
}

void main()
{
    WorldFlowSubGrid grid = wfGrid.subgrids[pc.subgridLevel].ref;
    const uint totalNumWorkgroups = grid.indexCount;

    uvec3 groups = approximate_xyz_at_least(totalNumWorkgroups, pc.groupDimensionLimit);

    wfGrid.subgrids[pc.subgridLevel].ref.dispatch.command = DispatchIndirectCommand(groups.x, groups.y, groups.z);
}