
#define GRID_LOCAL_SIZE_X 4
#define GRID_LOCAL_SIZE_Y 4
#define GRID_LOCAL_SIZE_Z 4

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_scalar_block_layout: enable

/* STRUCTS */

struct DispatchIndirectCommand
{
    uint groupCountX, groupCountY, groupCountZ;
};

layout(buffer_reference, std430) buffer DispatchIndirectCommandReference {
    DispatchIndirectCommand command;
};


layout (buffer_reference, std430) buffer VelocityBuffer {
    vec4 data[];
};

layout (buffer_reference, std430) buffer DensityBuffer {
    float data[];
};

layout (buffer_reference, std430) buffer PressureBuffer {
    float data[];
};

layout (buffer_reference, std430) buffer DivergenceBuffer {
    float data[];
};

layout(buffer_reference, std430) buffer FlagsBuffer {
    uint data[];
};

layout(buffer_reference, std430) buffer DebugBuffer {
    vec4 data[];
};

layout(buffer_reference, std430) buffer IndexOffsetsBuffer {
    uint data[];
};

layout(buffer_reference, std430) buffer VorticityBuffer {
    vec4 data[];
};

const uint FLAG_OCCUPIED       = 1 << 0;
const uint FLAG_SOURCE         = 1 << 1;
const uint FLAG_ACTIVE         = 1 << 2;
const uint FLAG_DEACTIVED      = 1 << 3;
const uint FLAG_NEW            = 1 << 4;

const uint FLAG_TRANSIENTS = FLAG_OCCUPIED | FLAG_SOURCE | FLAG_DEACTIVED | FLAG_NEW;
const uint FLAG_PERSISTENTS = FLAG_ACTIVE;

struct WorldFlowSubGrid
{
    VelocityBuffer      velocityBuffer;
    DensityBuffer       densityBuffer;
    PressureBuffer      pressureBuffer;
    DivergenceBuffer    divergenceBuffer;
    FlagsBuffer         flagsBuffer;
    DebugBuffer         debugBuffer;
    IndexOffsetsBuffer  indexOffsets;
    DispatchIndirectCommandReference dispatch;
    VorticityBuffer vorticityBuffer;
    uint64_t padding;

    uvec4 resolution;
    vec4 center;
    float cellSize;
    uint indexCount;
};


layout(buffer_reference, std430) buffer WorldFlowSubgridReference {
    WorldFlowSubGrid ref;
};

#define MAX_SUBGRID_LEVELS 4
struct WorldFlowGrid
{
	WorldFlowSubgridReference subgrids[MAX_SUBGRID_LEVELS];
	uint subgridCount;
};

/* FUNCTIONS */

void clearGridCell(WorldFlowSubGrid grid, uint index)
{
    grid.velocityBuffer.data[index]   = vec4(0.0);
    grid.densityBuffer.data[index]    = 0.0;
    grid.pressureBuffer.data[index]   = 0.0;
    grid.divergenceBuffer.data[index] = 0.0;
    grid.flagsBuffer.data[index]      = 0;
    grid.debugBuffer.data[index]      = vec4(0.0);
    grid.vorticityBuffer.data[index]      = vec4(0.0);
}

void copyGridCell(WorldFlowSubGrid srcGrid, WorldFlowSubGrid dstGrid, uint srcIndex, uint dstIndex)
{
    dstGrid.velocityBuffer.data[dstIndex]   = dstGrid.velocityBuffer.data[dstIndex];
    dstGrid.densityBuffer.data[dstIndex]    = dstGrid.densityBuffer.data[dstIndex];    
    dstGrid.pressureBuffer.data[dstIndex]   = dstGrid.pressureBuffer.data[dstIndex];   
    dstGrid.divergenceBuffer.data[dstIndex] = dstGrid.divergenceBuffer.data[dstIndex]; 
    dstGrid.vorticityBuffer.data[dstIndex]  = dstGrid.vorticityBuffer.data[dstIndex];  
}

bool isRedBlackActive(uvec3 id, uint redBlack) {
    return ((id.x + id.y + id.z + redBlack) % 2) == 0;
}

// bool isWithinGridBounds(uvec3 p, uvec4 gridResolution)
// {
//     return p.x < gridResolution.x &&
//            p.y < gridResolution.y && 
//            p.z < gridResolution.z;
// }

bool isWithinGridBounds(ivec3 p, uvec4 gridResolution)
{
    return all(greaterThanEqual(p, vec3(0))) && all(lessThan(p, vec3(gridResolution.xyz)));
}

#define CHUNK_FLATTENED_INDEXING
#ifdef CHUNK_FLATTENED_INDEXING
uint getGridIndex(uvec3 index, uvec4 gridResolution)
{
    // Extract grid dimensions (ignore w component)
    uvec3 dims = gridResolution.xyz;
    const uint chunkSize = GRID_LOCAL_SIZE_X;
    uvec3 chunkPos = index / chunkSize;
    uvec3 localPos = index % chunkSize;
    
    // Calculate chunks per dimension
    uvec3 chunksPerDim = (dims + chunkSize - 1u) / chunkSize;
    
    // Calculate chunk index using row-major ordering
    uint chunkIndex = (chunkPos.z * chunksPerDim.y * chunksPerDim.x) + 
                      (chunkPos.y * chunksPerDim.x) + 
                       chunkPos.x;
    
    // Calculate local index within chunk (row-major ordering)
    uint localIndex = (localPos.z * chunkSize * chunkSize) + 
                      (localPos.y * chunkSize) + 
                       localPos.x;
    
    // Combine chunk index and local index for final flat index
    return (chunkIndex * (chunkSize * chunkSize * chunkSize)) + localIndex;
}

uvec3 unflattenGridIndex(uint flatIndex, uvec4 gridResolution)
{
    // Extract grid dimensions (ignore w component)
    uvec3 dims = gridResolution.xyz;
    
    // Define chunk size (must match the flattening function)
    const uint chunkSize = GRID_LOCAL_SIZE_X;
    const uint chunkVolume = chunkSize * chunkSize * chunkSize;
    
    // Calculate chunks per dimension (ceiling division)
    uvec3 chunksPerDim = (dims + chunkSize - 1u) / chunkSize;
    
    // Determine which chunk this index belongs to and the position within that chunk
    uint chunkIndex = flatIndex / chunkVolume;
    uint localIndex = flatIndex % chunkVolume;
    
    // Calculate the chunk's 3D position
    uvec3 chunkPos;
    chunkPos.x = chunkIndex % chunksPerDim.x;
    chunkPos.y = (chunkIndex / chunksPerDim.x) % chunksPerDim.y;
    chunkPos.z = chunkIndex / (chunksPerDim.x * chunksPerDim.y);
    
    // Calculate local position within the chunk
    uvec3 localPos;
    localPos.x = localIndex % chunkSize;
    localPos.y = (localIndex / chunkSize) % chunkSize;
    localPos.z = localIndex / (chunkSize * chunkSize);
    
    // Combine chunk position and local position to get final 3D coordinates
    uvec3 position = chunkPos * chunkSize + localPos;
    
    // Clamp to grid dimensions to handle edge cases
    return min(position, dims - 1u);
}
#else
uint getGridIndex(uvec3 p, uvec4 gridResolution)
{
    return p.z * uint(gridResolution.x) * uint(gridResolution.y) +
           p.y * uint(gridResolution.x) +
           p.x;
}

uvec3 unflattenGridIndex(uint index, uvec4 gridResolution)
{
    uint z = index /  (gridResolution.x * gridResolution.y);
    uint y = (index % (gridResolution.x * gridResolution.y)) / gridResolution.x;
    uint x = (index % (gridResolution.x * gridResolution.y)) % gridResolution.x;
    return uvec3(x, y, z);
}
#endif

uvec3 getCubePos(uint index, uint res) {
    return uvec3(
        index % res,
        (index / res) % res,
        (index / (res*res))
    );
}

uint worldToGridIndex(vec3 worldPos, uvec4 gridResolution, float cellSize)
{
    vec3 worldSize = vec3(gridResolution.xyz) * cellSize;
    vec3 gridMin = -worldSize * 0.5;
    vec3 gridMax = worldSize * 0.5;
    vec3 normalizedpos = (worldPos - gridMin) / worldSize;  // normalize to [0,1]
    vec3 voxelpos = normalizedpos * vec3(gridResolution.xyz);
    uvec3 mappos = clamp(ivec3(floor(voxelpos)), ivec3(0), ivec3(gridResolution - 1));
	return getGridIndex(mappos, gridResolution);
}

vec3 gridToWorld(uvec3 gridPos, WorldFlowSubGrid sg)
{
    return (sg.center.xyz - vec3(sg.resolution.xyz/2.0) + vec3(gridPos)) * sg.cellSize + sg.cellSize/2.0;
}

uint getWorkgroupIndex(uvec3 workgroupID, uvec3 numWorkgroups) {
    return workgroupID.x +
           workgroupID.y * numWorkgroups.x +
           workgroupID.z * numWorkgroups.x * numWorkgroups.y;
}

bool isWorkgroupActive(WorldFlowGrid wfGrid, uint level, uvec3 workGroupID, uvec3 numWorkGroups) {
    if(level == 0) {
        return true;
    }

    return getWorkgroupIndex(workGroupID, numWorkGroups) < wfGrid.subgrids[level].ref.indexCount;
}

uvec3 getSubgridWorkgroupOffset(uint workgroupOffsetIndex, WorldFlowSubGrid coarseGrid, WorldFlowSubGrid fineGrid)
{
    uvec3 gridPos = unflattenGridIndex(fineGrid.indexOffsets.data[workgroupOffsetIndex], coarseGrid.resolution) * (fineGrid.resolution.w / coarseGrid.resolution.w);
    return gridPos;
}

uvec3 getGridPos(WorldFlowGrid wfGrid, uint level, uvec3 globalInvocationID, uvec3 localInvocationID, uvec3 workGroupID, uvec3 numWorkGroups) {
    if(level == 0) {
        return globalInvocationID;
    }

    uint wgIndex = getWorkgroupIndex(workGroupID, numWorkGroups);
    uvec3 offset = getSubgridWorkgroupOffset(wgIndex, wfGrid.subgrids[level-1].ref, wfGrid.subgrids[level].ref);
    return offset + localInvocationID;
}

uvec3 getCoarseGridPos(uvec3 finePos, WorldFlowGrid wfGrid, uint fineLevel)
{
    if(fineLevel == 0) {
        return finePos;
    }
    return (finePos / (wfGrid.subgrids[fineLevel].ref.resolution.w / wfGrid.subgrids[fineLevel-1].ref.resolution.w));
}

uint getCoarseGridIndex(uvec3 finePos, WorldFlowGrid wfGrid, uint fineLevel)
{
    if(fineLevel == 0) return getGridIndex(finePos, wfGrid.subgrids[fineLevel].ref.resolution);
    return getGridIndex(getCoarseGridPos(finePos, wfGrid, fineLevel), wfGrid.subgrids[fineLevel-1].ref.resolution);
}


uvec3 getRedBlackPosition(uvec3 threadID, uvec4 gridResolution, uint redBlack)
{
    uint z = threadID.z * 2;  // Double the X position
    // Offset X based on Y and Z parity
    bool shouldOffset = ((threadID.x + threadID.y) % 2) == 0;
    z = z + (shouldOffset ? redBlack : (1 - redBlack));
    
    return uvec3(threadID.x, threadID.y, z);
}

/*
SAMPLE FUNCTIONS
*/

//  VELOCITY  //
vec4 sampleVelocity(uint index, WorldFlowSubGrid grid, vec4 fallback) {
    if((grid.flagsBuffer.data[index] & FLAG_OCCUPIED) > 0) {
        return fallback;
    }
    return grid.velocityBuffer.data[index];
}


vec4 velocityBoundary(vec4 neumannValue, ivec3 samplePos, ivec3 coarseGridSamplePos, WorldFlowGrid wfGrid, uint subgridLevel) {
    WorldFlowSubGrid fineGrid = wfGrid.subgrids[subgridLevel].ref;
    vec4 edgeFallback = vec4(0.0); //advection used to use neumann
    // vec4 edgeFallback = neumannValue;

    if(!isWithinGridBounds(samplePos, fineGrid.resolution)) return edgeFallback; //return the value on the edge

    // sample coarse grid if neighbouring block is not active
    if(subgridLevel > 0) {
        WorldFlowSubGrid coarseGrid = wfGrid.subgrids[subgridLevel-1].ref;
        if(!isWithinGridBounds(coarseGridSamplePos, coarseGrid.resolution)) { // should never happen with complete coverage subgrids
            return edgeFallback;
        }
        uint coarseIndex = getGridIndex(coarseGridSamplePos, coarseGrid.resolution);
        if((coarseGrid.flagsBuffer.data[coarseIndex] & FLAG_ACTIVE) == 0) {
            // return edgeFallback;
            return sampleVelocity(coarseIndex, coarseGrid, edgeFallback);
        }
    }

    uint fineGridIndex = getGridIndex(samplePos, fineGrid.resolution);
    return sampleVelocity(fineGridIndex, fineGrid, edgeFallback);
}


//  PRESSURE  //
float samplePressure(uint index, WorldFlowSubGrid grid, float fallback) {
    if((grid.flagsBuffer.data[index] & FLAG_OCCUPIED) > 0) {
        return fallback;
    }
    return grid.pressureBuffer.data[index];
}

float pressureBoundary(float neumannValue, ivec3 samplePos, ivec3 coarseGridSamplePos, WorldFlowGrid wfGrid, uint subgridLevel) {
    WorldFlowSubGrid fineGrid = wfGrid.subgrids[subgridLevel].ref;
    float edgeFallback = neumannValue;

    if(!isWithinGridBounds(samplePos, fineGrid.resolution)) return edgeFallback; //return the value on the edge

    // sample coarse grid if neighbouring block is not active
    if(subgridLevel > 0) {
        WorldFlowSubGrid coarseGrid = wfGrid.subgrids[subgridLevel-1].ref;
        if(!isWithinGridBounds(coarseGridSamplePos, coarseGrid.resolution)) { // should never happen with complete coverage subgrids
            return edgeFallback;
        }
        uint coarseIndex = getGridIndex(coarseGridSamplePos, coarseGrid.resolution);
        if((coarseGrid.flagsBuffer.data[coarseIndex] & FLAG_ACTIVE) == 0) {
            return samplePressure(coarseIndex, coarseGrid, edgeFallback) / ( fineGrid.resolution.w - coarseGrid.resolution.w + ((subgridLevel == 1) ? 1 : 0)); // fix pressure units (due to difference between h)
        }
    }

    uint fineGridIndex = getGridIndex(samplePos, fineGrid.resolution);
    return samplePressure(fineGridIndex, fineGrid, edgeFallback);
}

//  DENSITY  //
float sampleDensity(uint index, WorldFlowSubGrid grid, float fallback) {
    if((grid.flagsBuffer.data[index] & FLAG_OCCUPIED) > 0) {
        return fallback;
    }
    return grid.densityBuffer.data[index];
}

float densityBoundary(float neumannValue, ivec3 samplePos, ivec3 coarseGridSamplePos, WorldFlowGrid wfGrid, uint subgridLevel) {
    WorldFlowSubGrid fineGrid = wfGrid.subgrids[subgridLevel].ref;
    float edgeFallback = neumannValue;

    if(!isWithinGridBounds(samplePos, fineGrid.resolution)) return edgeFallback; //return the value on the edge

    // sample coarse grid neighbour
    if(subgridLevel > 0) {
        WorldFlowSubGrid coarseGrid = wfGrid.subgrids[subgridLevel-1].ref;
        if(!isWithinGridBounds(coarseGridSamplePos, coarseGrid.resolution)) { // should never happen with complete coverage subgrids
            return edgeFallback;
        }
        uint coarseIndex = getGridIndex(coarseGridSamplePos, coarseGrid.resolution);
        if((coarseGrid.flagsBuffer.data[coarseIndex] & FLAG_ACTIVE) == 0) {
            return sampleDensity(coarseIndex, coarseGrid, edgeFallback);
        }
    }

    uint fineGridIndex = getGridIndex(samplePos, fineGrid.resolution);
    return sampleDensity(fineGridIndex, fineGrid, edgeFallback);
}


float SOR(float old, float new, float N)
{
	float alpha = 2.0 / (1.0 + sin(3.14159 / N));
	float result = alpha * new + (1.0 - alpha) * old;
	return result;
}

vec4 SOR(vec4 old, vec4 new, float N)
{
	const float alpha = 2.0 / (1.0 + sin(3.14159 / N));
	vec4 result = alpha * new + (1 - alpha) * old;
	return result;
}

// Define block size (typically power of 2)
const uint BLOCK_SIZE = 8; // or 8, depending on your needs
const uint BLOCK_BITS = 3; // log2(BLOCK_SIZE), 2 for 4, 3 for 8
// Swizzle function - converts linear dispatch ID to blocked ordering
uvec3 getSwizzledInvocationID(uvec3 globalID, uvec3 dimensions) {
    // Calculate block coordinates and local coordinates
    uvec3 blockCoords = globalID >> BLOCK_BITS;
    uvec3 localCoords = globalID & (BLOCK_SIZE-1);
    
    // Calculate total number of blocks in each dimension
    uvec3 numBlocks = (dimensions + BLOCK_SIZE - 1) >> BLOCK_BITS;
    
    // Calculate 1D block index in Z-order or Morton order
    // This is the key part that changes the ordering
    uint blockIndex = blockCoords.x + 
                     (blockCoords.y * numBlocks.x) + 
                     (blockCoords.z * numBlocks.x * numBlocks.y);
    
    // Convert block index back to 3D block coordinates
    uvec3 newBlockCoords;
    newBlockCoords.x = blockIndex % numBlocks.x;
    newBlockCoords.y = (blockIndex / numBlocks.x) % numBlocks.y;
    newBlockCoords.z = blockIndex / (numBlocks.x * numBlocks.y);
    
    // Combine new block coordinates with local coordinates
    return (newBlockCoords << BLOCK_BITS) | localCoords;
}