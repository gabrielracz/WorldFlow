
struct FluidGridCell
{
	vec4 velocity;
	float density;
    float pressure;
    float divergence;
    uint flags;
    vec4 debug;
};

struct FluidGridInfo
{
	uvec4 resolution;
	vec4 position;
	float cellSize;
};

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

layout (buffer_reference, std430) buffer VelocityBuffer {
    vec4 data[];
};

layout (buffer_reference, std430) buffer DensityBuffer {
    float data[];
};

layout (buffer_reference, std430) buffer PressureBuffer {
    float data[];
};

layout (buffer_reference, std430) buffer DivergenceBuffer {
    float data[];
};

layout(buffer_reference, std430) buffer FlagsBuffer {
    uint data[];
};

struct FluidGridReferences
{
    VelocityBuffer   velocityBuffer;
    DensityBuffer    densityBuffer;
    PressureBuffer   pressureBuffer;
    DivergenceBuffer divergenceBuffer;
    FlagsBuffer      flagsBuffer;
};


uint FLAG_OCCUPIED = 0x00000001;
uint FLAG_SOURCE   = 0x00000002;

FluidGridCell zeroGridCell() {
	return FluidGridCell(vec4(0.0), 0.0, 0.0, 0.0, 0, vec4(0.0));
	// return FluidGridCell(vec4(0.0), 0.0, 0.0, 0.0, 0);
}

void clearGridCell(FluidGridReferences grid, uint index)
{
    
    grid.velocityBuffer.data[index]   = vec4(0.0);
    grid.densityBuffer.data[index]    = 0.0;
    grid.pressureBuffer.data[index]   = 0.0;
    grid.divergenceBuffer.data[index] = 0.0;
    grid.flagsBuffer.data[index]      = 0;
}

bool checkFlag(uint flags, uint mask)
{
	return (flags & mask) > 0;
}

bool isWithinGridBounds(uvec3 p, uvec4 gridResolution)
{
    return p.x < gridResolution.x &&
           p.y < gridResolution.y && 
           p.z < gridResolution.z;
}

// #define CHUNK_FLATTENED_INDEXING
#ifdef CHUNK_FLATTENED_INDEXING
uint getGridIndex(uvec3 index, uvec4 gridResolution)
{
    // Extract grid dimensions (ignore w component)
    uvec3 dims = gridResolution.xyz;
    const uint chunkSize = 8u;
    uvec3 chunkPos = index / chunkSize;
    uvec3 localPos = index % chunkSize;
    
    // Calculate chunks per dimension
    uvec3 chunksPerDim = (dims + chunkSize - 1u) / chunkSize;
    
    // Calculate chunk index using row-major ordering
    uint chunkIndex = (chunkPos.z * chunksPerDim.y * chunksPerDim.x) + 
                      (chunkPos.y * chunksPerDim.x) + 
                       chunkPos.x;
    
    // Calculate local index within chunk (row-major ordering)
    uint localIndex = (localPos.z * chunkSize * chunkSize) + 
                      (localPos.y * chunkSize) + 
                       localPos.x;
    
    // Combine chunk index and local index for final flat index
    return (chunkIndex * (chunkSize * chunkSize * chunkSize)) + localIndex;
}

uvec3 unflattenGridIndex(uint flatIndex, uvec4 gridResolution)
{
    // Extract grid dimensions (ignore w component)
    uvec3 dims = gridResolution.xyz;
    
    // Define chunk size (must match the flattening function)
    const uint chunkSize = 4u;
    const uint chunkVolume = chunkSize * chunkSize * chunkSize;
    
    // Calculate chunks per dimension (ceiling division)
    uvec3 chunksPerDim = (dims + chunkSize - 1u) / chunkSize;
    
    // Determine which chunk this index belongs to and the position within that chunk
    uint chunkIndex = flatIndex / chunkVolume;
    uint localIndex = flatIndex % chunkVolume;
    
    // Calculate the chunk's 3D position
    uvec3 chunkPos;
    chunkPos.x = chunkIndex % chunksPerDim.x;
    chunkPos.y = (chunkIndex / chunksPerDim.x) % chunksPerDim.y;
    chunkPos.z = chunkIndex / (chunksPerDim.x * chunksPerDim.y);
    
    // Calculate local position within the chunk
    uvec3 localPos;
    localPos.x = localIndex % chunkSize;
    localPos.y = (localIndex / chunkSize) % chunkSize;
    localPos.z = localIndex / (chunkSize * chunkSize);
    
    // Combine chunk position and local position to get final 3D coordinates
    uvec3 position = chunkPos * chunkSize + localPos;
    
    // Clamp to grid dimensions to handle edge cases
    return min(position, dims - 1u);
}
#else
uint getGridIndex(uvec3 p, uvec4 gridResolution)
{
    return p.z * uint(gridResolution.x) * uint(gridResolution.y) +
           p.y * uint(gridResolution.x) +
           p.x;
}

uvec3 unflattenGridIndex(uint index, uvec4 gridResolution)
{
    uint z = index /  (gridResolution.x * gridResolution.y);
    uint y = (index % (gridResolution.x * gridResolution.y)) / gridResolution.x;
    uint x = (index % (gridResolution.x * gridResolution.y)) % gridResolution.x;
    return uvec3(x, y, z);
}
#endif

uint worldToGridIndex(vec3 worldPos, uvec4 gridResolution, float cellSize)
{
    vec3 worldSize = vec3(gridResolution.xyz) * cellSize;
    vec3 gridMin = -worldSize * 0.5;
    vec3 gridMax = worldSize * 0.5;
    vec3 normalizedpos = (worldPos - gridMin) / worldSize;  // normalize to [0,1]
    vec3 voxelpos = normalizedpos * vec3(gridResolution.xyz);
    uvec3 mappos = clamp(ivec3(floor(voxelpos)), ivec3(0), ivec3(gridResolution - 1));
	return getGridIndex(mappos, gridResolution);
}

vec3 gridToWorld(uint flatIndex, uvec4 gridResolution, float cellSize)
{
    uvec3 index = unflattenGridIndex(flatIndex, gridResolution);
    return vec3(index) * cellSize;
}

uvec3 getRedBlackPosition(uvec3 threadID, uvec4 gridResolution, uint redBlack)
{
    uint z = threadID.z * 2;  // Double the X position
    
    // Offset X based on Y and Z parity
    bool shouldOffset = ((threadID.x + threadID.y) % 2) == 0;
    z = z + (shouldOffset ? redBlack : (1 - redBlack));
    
    return uvec3(threadID.x, threadID.y, z);
}

float SOR(float old, float new, float N)
{
	float alpha = 2.0 / (1.0 + sin(3.14159 / N));
	float result = alpha * new + (1.0 - alpha) * old;
	return result;
}

vec4 SOR(vec4 old, vec4 new, float N)
{
	const float alpha = 2.0 / (1.0 + sin(3.14159 / N));
	vec4 result = alpha * new + (1 - alpha) * old;
	return result;
}

// Define block size (typically power of 2)
const uint BLOCK_SIZE = 8; // or 8, depending on your needs
const uint BLOCK_BITS = 3; // log2(BLOCK_SIZE), 2 for 4, 3 for 8

// Swizzle function - converts linear dispatch ID to blocked ordering
uvec3 getSwizzledInvocationID(uvec3 globalID, uvec3 dimensions) {
    // Calculate block coordinates and local coordinates
    uvec3 blockCoords = globalID >> BLOCK_BITS;
    uvec3 localCoords = globalID & (BLOCK_SIZE-1);
    
    // Calculate total number of blocks in each dimension
    uvec3 numBlocks = (dimensions + BLOCK_SIZE - 1) >> BLOCK_BITS;
    
    // Calculate 1D block index in Z-order or Morton order
    // This is the key part that changes the ordering
    uint blockIndex = blockCoords.x + 
                     (blockCoords.y * numBlocks.x) + 
                     (blockCoords.z * numBlocks.x * numBlocks.y);
    
    // Convert block index back to 3D block coordinates
    uvec3 newBlockCoords;
    newBlockCoords.x = blockIndex % numBlocks.x;
    newBlockCoords.y = (blockIndex / numBlocks.x) % numBlocks.y;
    newBlockCoords.z = blockIndex / (numBlocks.x * numBlocks.y);
    
    // Combine new block coordinates with local coordinates
    return (newBlockCoords << BLOCK_BITS) | localCoords;
}