vec3 clampVector(vec3 a, vec3 minVec, vec3 maxVec) {
    return min(max(a, minVec), maxVec);
}

// pass values as [l, r, d, u, f, b]
float trilinearInterpolation(vec3 cellPoint, float values[6]) {
    // Ensure cellPoint is within the 0-1 range for each dimension.  If your actual
    // grid isn't normalized, you'll need to adjust cellPoint accordingly
    cellPoint = clamp(cellPoint, vec3(0.0), vec3(1.0));

    // Calculate the indices of the 8 surrounding voxels.  We're assuming
    // the values are arranged in a "cube" where values[0] is the origin
    // and values[5] is the opposite corner.  The order matters!
    int x0 = int(floor(cellPoint.x));
    int x1 = int(ceil(cellPoint.x));
    int y0 = int(floor(cellPoint.y));
    int y1 = int(ceil(cellPoint.y));
    int z0 = int(floor(cellPoint.z));
    int z1 = int(ceil(cellPoint.z));

    // Calculate interpolation factors (how far along each axis we are)
    float fx = cellPoint.x - float(x0);
    float fy = cellPoint.y - float(y0);
    float fz = cellPoint.z - float(z0);

    // Perform trilinear interpolation.  This is done by interpolating
    // along one axis, then another, and finally the third.

    // Interpolate along x:
    float c00 = mix(values[x0 + y0 * 2 + z0 * 4], values[x1 + y0 * 2 + z0 * 4], fx);
    float c01 = mix(values[x0 + y0 * 2 + z1 * 4], values[x1 + y0 * 2 + z1 * 4], fx);
    float c10 = mix(values[x0 + y1 * 2 + z0 * 4], values[x1 + y1 * 2 + z0 * 4], fx);
    float c11 = mix(values[x0 + y1 * 2 + z1 * 4], values[x1 + y1 * 2 + z1 * 4], fx);

    // Interpolate along y:
    float c0 = mix(c00, c10, fy);
    float c1 = mix(c01, c11, fy);

    // Interpolate along z:
    float result = mix(c0, c1, fz);
    return result;
}

float trilinearInterpolation(vec3 fracPos, float values[6], float cellValue) {
    // Weighted average of the 6 neighbors AND the center cell.

    float result = 0.0;

    // Interpolate along x-axis
    float xWeight = fracPos.x;
    result += mix(values[0], values[1], xWeight);  // l and r

    // Interpolate along y-axis
    float yWeight = fracPos.y;
    result += mix(values[2], values[3], yWeight);  // d and u

    // Interpolate along z-axis
    float zWeight = fracPos.z;
    result += mix(values[4], values[5], zWeight);  // f and b

    // Add the center value, weighted appropriately.  A simple approach is to
    // give the center cell an equal weight to each of the other axes.
    result += cellValue;


    // Divide by 4 to normalize (since we added 4 values - 3 axes + center)
    return result / 4.0;
}

vec3 trilinearInterpolation(vec3 fracPos, vec3 values[6], vec3 cellValue) {
    // Weighted average of the 6 neighbors AND the center cell.

    vec3 result = vec3(0.0);

    // Interpolate along x-axis
    float xWeight = fracPos.x;
    result += mix(values[0], values[1], xWeight);  // l and r

    // Interpolate along y-axis
    float yWeight = fracPos.y;
    result += mix(values[2], values[3], yWeight);  // d and u

    // Interpolate along z-axis
    float zWeight = fracPos.z;
    result += mix(values[4], values[5], zWeight);  // f and b

    // Add the center value, weighted appropriately.  A simple approach is to
    // give the center cell an equal weight to each of the other axes.
    result += cellValue;


    // Divide by 4 to normalize (since we added 4 values - 3 axes + center)
    return result / 4.0;
}


vec3 triInterp(vec3 c000, vec3 c100, vec3 c010, vec3 c110,
                           vec3 c001, vec3 c101, vec3 c011, vec3 c111,
                           vec3 weights) {
    // First interpolate along x axis
    vec3 c00 = mix(c000, c100, weights.x);
    vec3 c10 = mix(c010, c110, weights.x);
    vec3 c01 = mix(c001, c101, weights.x);
    vec3 c11 = mix(c011, c111, weights.x);
    
    // Then interpolate along y axis
    vec3 c0 = mix(c00, c10, weights.y);
    vec3 c1 = mix(c01, c11, weights.y);
    
    // Finally interpolate along z axis
    return mix(c0, c1, weights.z);
}

float triInterp(float c000, float c100, float c010, float c110,
                           float c001, float c101, float c011, float c111,
                           vec3 weights) {
    // First interpolate along x axis
    float c00 = mix(c000, c100, weights.x);
    float c10 = mix(c010, c110, weights.x);
    float c01 = mix(c001, c101, weights.x);
    float c11 = mix(c011, c111, weights.x);
    
    // Then interpolate along y axis
    float c0 = mix(c00, c10, weights.y);
    float c1 = mix(c01, c11, weights.y);
    
    // Finally interpolate along z axis
    return mix(c0, c1, weights.z);
}



vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}
float cnoise(vec3 P){
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

vec4 flameHeatmapColor(float temperature) {
    // Normalize temperature to 0-1 range for typical "heat" visualization
    // Assuming input range of 0-1, where 1 represents maximum temperature
    
    // Colors based on black-body radiation spectrum
    vec3 color;
    
    // Start with dark red, progress through orange, yellow, and finally blue-white
    if (temperature < 0.33) {
        // Dark red to bright red
        float t = temperature * 3.0;
        color = vec3(t * 0.7, 0.0, 0.0);
    } else if (temperature < 0.66) {
        // Red to orange/yellow
        float t = (temperature - 0.33) * 3.0;
        color = vec3(0.7 + (0.3 * t), 0.4 * t, 0.0);
    } else {
        // Yellow to white with blue tint
        float t = (temperature - 0.66) * 3.0;
        color = vec3(1.0, 0.4 + (0.6 * t), t * 0.8);
    }
    
    // Add glow effect for higher temperatures
    float glow = max(0.0, temperature - 0.5) * 2.0;
    color += vec3(glow) * 0.5;
    color = clamp(color, 0.0, 1.0);
    
    // Ensure colors stay in valid range
    return vec4(color.rgb, 1.0);
}