vec3 clampVector(vec3 a, vec3 minVec, vec3 maxVec) {
    return min(max(a, minVec), maxVec);
}

float max3 (vec3 v) {
  return max (max (v.x, v.y), v.z);
}

float avg3(vec3 v) {
	return (v.x + v.y + v.z) / 3.0;
}

vec4 triInterp(vec4 c000, vec4 c100, vec4 c010, vec4 c110,
               vec4 c001, vec4 c101, vec4 c011, vec4 c111,
               vec3 weights) {
    // Interpolate along x
    vec4 c00 = mix(c000, c100, weights.x);
    vec4 c10 = mix(c010, c110, weights.x);
    vec4 c01 = mix(c001, c101, weights.x);
    vec4 c11 = mix(c011, c111, weights.x);
    
    // Interpolate along y
    vec4 c0 = mix(c00, c10, weights.y);
    vec4 c1 = mix(c01, c11, weights.y);
    
    // Interpolate along z
    return mix(c0, c1, weights.z);
}

float triInterp(float c000, float c100, float c010, float c110,
                           float c001, float c101, float c011, float c111,
                           vec3 weights) {
    // First interpolate along x axis
    float c00 = mix(c000, c100, weights.x);
    float c10 = mix(c010, c110, weights.x);
    float c01 = mix(c001, c101, weights.x);
    float c11 = mix(c011, c111, weights.x);
    
    // Then interpolate along y axis
    float c0 = mix(c00, c10, weights.y);
    float c1 = mix(c01, c11, weights.y);
    
    // Finally interpolate along z axis
    return mix(c0, c1, weights.z);
}

// Helper functions for cubic interpolation
float h00(float t) { return 2.0*t*t*t - 3.0*t*t + 1.0; }
float h10(float t) { return t*t*t - 2.0*t*t + t; }
float h01(float t) { return -2.0*t*t*t + 3.0*t*t; }
float h11(float t) { return t*t*t - t*t; }

// Cubic interpolation with 8 points
float cubicInterp8Point(float c000, float c100, float c010, float c110,
                        float c001, float c101, float c011, float c111,
                        vec3 weights) {
    // We'll use the standard tricubic interpolation algorithm
    // but estimate derivatives from our 8 data points
    
    // Derivatives in X direction
    float dx000 = (c100 - c000);
    float dx010 = (c110 - c010);
    float dx001 = (c101 - c001);
    float dx011 = (c111 - c011);
    
    // Estimate points using Hermite interpolation along X
    float c00 = c000 * h00(weights.x) + dx000 * h10(weights.x) + 
                c100 * h01(weights.x) + dx000 * h11(weights.x);
    float c10 = c010 * h00(weights.x) + dx010 * h10(weights.x) + 
                c110 * h01(weights.x) + dx010 * h11(weights.x);
    float c01 = c001 * h00(weights.x) + dx001 * h10(weights.x) + 
                c101 * h01(weights.x) + dx001 * h11(weights.x);
    float c11 = c011 * h00(weights.x) + dx011 * h10(weights.x) + 
                c111 * h01(weights.x) + dx011 * h11(weights.x);
    
    // Derivatives in Y direction
    float dy0 = (c10 - c00);
    float dy1 = (c11 - c01);
    
    // Interpolate along Y
    float c0 = c00 * h00(weights.y) + dy0 * h10(weights.y) + 
               c10 * h01(weights.y) + dy0 * h11(weights.y);
    float c1 = c01 * h00(weights.y) + dy1 * h10(weights.y) + 
               c11 * h01(weights.y) + dy1 * h11(weights.y);
    
    // Derivative in Z direction
    float dz = (c1 - c0);
    
    // Final interpolation along Z
    return c0 * h00(weights.z) + dz * h10(weights.z) + 
           c1 * h01(weights.z) + dz * h11(weights.z);
}

vec4 cubicInterp8Point(vec4 c000, vec4 c100, vec4 c010, vec4 c110,
                        vec4 c001, vec4 c101, vec4 c011, vec4 c111,
                        vec3 weights) {
    // We'll use the standard tricubic interpolation algorithm
    // but estimate derivatives from our 8 data points
    
    // Derivatives in X direction
    vec4 dx000 = (c100 - c000);
    vec4 dx010 = (c110 - c010);
    vec4 dx001 = (c101 - c001);
    vec4 dx011 = (c111 - c011);
    
    // Estimate points using Hermite interpolation along X
    vec4 c00 = c000 * h00(weights.x) + dx000 * h10(weights.x) + 
                c100 * h01(weights.x) + dx000 * h11(weights.x);
    vec4 c10 = c010 * h00(weights.x) + dx010 * h10(weights.x) + 
                c110 * h01(weights.x) + dx010 * h11(weights.x);
    vec4 c01 = c001 * h00(weights.x) + dx001 * h10(weights.x) + 
                c101 * h01(weights.x) + dx001 * h11(weights.x);
    vec4 c11 = c011 * h00(weights.x) + dx011 * h10(weights.x) + 
                c111 * h01(weights.x) + dx011 * h11(weights.x);
    
    // Derivatives in Y direction
    vec4 dy0 = (c10 - c00);
    vec4 dy1 = (c11 - c01);
    
    // Interpolate along Y
    vec4 c0 = c00 * h00(weights.y) + dy0 * h10(weights.y) + 
               c10 * h01(weights.y) + dy0 * h11(weights.y);
    vec4 c1 = c01 * h00(weights.y) + dy1 * h10(weights.y) + 
               c11 * h01(weights.y) + dy1 * h11(weights.y);
    
    // Derivative in Z direction
    vec4 dz = (c1 - c0);
    
    // Final interpolation along Z
    return c0 * h00(weights.z) + dz * h10(weights.z) + 
           c1 * h01(weights.z) + dz * h11(weights.z);
}




vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}
float cnoise(vec3 P){
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

vec4 flameHeatmapColor(float temperature) {
    // Normalize temperature to 0-1 range for typical "heat" visualization
    // Assuming input range of 0-1, where 1 represents maximum temperature
    
    // Colors based on black-body radiation spectrum
    vec3 color;
    
    // Start with dark red, progress through orange, yellow, and finally blue-white
    if (temperature < 0.33) {
        // Dark red to bright red
        float t = temperature * 3.0;
        color = vec3(t * 0.7, 0.0, 0.0);
    } else if (temperature < 0.66) {
        // Red to orange/yellow
        float t = (temperature - 0.33) * 3.0;
        color = vec3(0.7 + (0.3 * t), 0.3 * t, 0.0);
    } else {
        // Yellow to white with blue tint
        float t = (temperature - 0.66) * 3.0;
        color = vec3(1.0, 0.4 + (0.6 * t), t * 0.8);
    }
    
    // Add glow effect for higher temperatures
    float glow = max(0.0, temperature - 0.5) * 2.0;
    color += vec3(glow) * 0.5;
    color = clamp(color, 0.0, 1.0);
    
    // Ensure colors stay in valid range
    return vec4(color.rgb, 1.0);
}

vec4 viridisColor(float t) {
    // Ensures input is in 0-1 range
    t = clamp(t, 0.0, 1.0);
    
    // Constants for Viridis colormap
    const vec3 c0 = vec3(0.267004, 0.004874, 0.329415);
    const vec3 c1 = vec3(0.253935, 0.265254, 0.529983);
    const vec3 c2 = vec3(0.163625, 0.471133, 0.558148);
    const vec3 c3 = vec3(0.134692, 0.658636, 0.517649);
    const vec3 c4 = vec3(0.477504, 0.821444, 0.318195);
    const vec3 c5 = vec3(0.993248, 0.906157, 0.143936);
    
    vec3 color;
    if (t < 0.2) {
        // Purple to blue transition
        float x = t * 5.0;
        color = mix(c0, c1, x);
    } else if (t < 0.4) {
        // Blue to blue-green transition
        float x = (t - 0.2) * 5.0;
        color = mix(c1, c2, x);
    } else if (t < 0.8) {
        // Blue-green to green transition
        float x = (t - 0.4) * 5.0;
        color = mix(c2, c3, x);
    } else if (t < 0.95) {
        // Green to yellow-green transition
        float x = (t - 0.8) * 5.0;
        color = mix(c3, c4, x);
    } else {
        // Yellow-green to yellow transition
        float x = (t - 0.95) * 5.0;
        color = mix(c4, c5, x);
    }
    
    return vec4(color, 1.0);
}

vec4 infernoColor(float t) {
    // Ensures input is in 0-1 range
    t = clamp(t, 0.0, 1.0);
    
    // Constants for Inferno colormap
    const vec3 c0 = vec3(0.001462, 0.000466, 0.013866);
    const vec3 c1 = vec3(0.281477, 0.089601, 0.412874);
    const vec3 c2 = vec3(0.577738, 0.199721, 0.496203);
    const vec3 c3 = vec3(0.906311, 0.364682, 0.251485);
    const vec3 c4 = vec3(0.993248, 0.746554, 0.235642);
    const vec3 c5 = vec3(0.988362, 0.998364, 0.644924);
    
    vec3 color;
    if (t < 0.2) {
        // Dark purple to deep blue transition
        float x = t * 5.0;
        color = mix(c0, c1, x);
    } else if (t < 0.4) {
        // Deep blue to reddish-purple transition
        float x = (t - 0.2) * 5.0;
        color = mix(c1, c2, x);
    } else if (t < 0.8) {
        // Reddish-purple to orange transition
        float x = (t - 0.4) * 5.0;
        color = mix(c2, c3, x);
    } else if (t < 0.95) {
        // Orange to yellow-orange transition
        float x = (t - 0.8) * 5.0;
        color = mix(c3, c4, x);
    } else {
        // Yellow-orange to bright yellow transition
        float x = (t - 0.95) * 5.0;
        color = mix(c4, c5, x);
    }
    
    return vec4(color, 1.0);
}
