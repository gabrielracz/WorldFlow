#version 460

// size of compute workgroup
layout (local_size_x = 16, local_size_y = 16) in;

// descriptor bindings for the pipeline
layout(rgba32f, set = 0, binding = 0) uniform readonly image2D velocityImage;
layout(rgba32f, set = 0, binding = 1) uniform image2D densityImage;

void main()
{
    ivec2 size = imageSize(velocityImage);
    float N = size.x ;//* size.y;
    uint i = gl_GlobalInvocationID.x;
    uint j = gl_GlobalInvocationID.y;

    const float h = N;
    // Only interested in the components flowing into this cell
    float l = imageLoad(velocityImage, ivec2(i-1, j)).x;
    float r = imageLoad(velocityImage, ivec2(i+1, j)).x;
    float u = imageLoad(velocityImage, ivec2(i, j-1)).y;
    float d = imageLoad(velocityImage, ivec2(i, j+1)).y;

    // central difference   (f(a + h) - f(a - h))/2h
    float div = ((r - l) + (d - u)) / (2.0*h);
    vec4 dens = imageLoad(densityImage, ivec2(i, j));
    dens.a = div; // pack the divergence into density alpha component;
    dens.g = 0.0; // reset pressure value each frame
    imageStore(densityImage, ivec2(i, j), dens);
    return;
}